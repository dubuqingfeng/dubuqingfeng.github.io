<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>独步清风's blog</title><link href="dubuqingfeng.github.io/" rel="alternate"></link><link href="dubuqingfeng.github.io/feeds/all.atom.xml" rel="self"></link><id>dubuqingfeng.github.io/</id><updated>2016-06-29T21:31:00+02:00</updated><entry><title>findViewById注解、泛型、反射、MVVM</title><link href="dubuqingfeng.github.io/posts/2016/%206/29/201606-android-develop-annotations-reflect-mvvm/index.html" rel="alternate"></link><updated>2016-06-29T21:31:00+02:00</updated><author><name>admin</name></author><id>tag:,2016-06-29:dubuqingfeng.github.io/posts/2016/ 6/29/201606-android-develop-annotations-reflect-mvvm/index.html</id><summary type="html">&lt;h5&gt;0x00   TOC：&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;常规&lt;/p&gt;
&lt;p&gt;注解&lt;/p&gt;
&lt;p&gt;泛型&lt;/p&gt;
&lt;p&gt;反射&lt;/p&gt;
&lt;p&gt;在线生成&lt;/p&gt;
&lt;p&gt;DataBinding&lt;/p&gt;
&lt;p&gt;源码实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;0x01  常规&lt;/h5&gt;
&lt;p&gt;这里findViewById作用以及用法就不再叙述了，接触过Android开发的都明白其怎么用，这次主要分析如何提高其性能，并且使用&lt;strong&gt;TraceView&lt;/strong&gt;分析，如何改善或者节省代码，使开发人员变得更懒。&lt;/p&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Mac 10.11
Android Studio2.0
SDK24
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如何使用TraceView监测代码呢，在想要根据的代码片段之间使用以下两句代码，注意添加SD卡权限。当然也可以直接在DDMS中的面板里的&lt;code&gt;Start Method Profiling&lt;/code&gt;来监测方法。此次就将代码放置在&lt;code&gt;initView()&lt;/code&gt;方法里，以示区别。并且都是启动一次，再结束&lt;strong&gt;activity&lt;/strong&gt;，然后再启动Activity去比较运行时间。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Debug.startMethodTracing(&amp;quot;debug_test&amp;quot;);  
Debug.stopMethodTracing();
//权限
&amp;lt;uses-permission android:name=&amp;quot;android.permission.WRITE_EXTERNAL_STORAGE&amp;quot;/&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&amp;quot;/&amp;gt;
//adb导出
adb pull sdcard/debug_test.trace  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里采用的xml文件是这样的，其中包含了几个TextView，ImageView。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/tools&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vertical&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingBottom=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_vertical_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingLeft=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_horizontal_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingRight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_horizontal_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingTop=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_vertical_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;tools:context=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.sxau.findviewbyiddemo1.MainActivity&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/tv_demo1&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;32sp&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/tv_demo2&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@string/textview1&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;32sp&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/tv_demo3&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@string/textview3&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;32sp&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;EditText&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/et_test&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:inputType=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;32sp&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;ImageView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/iv_test&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:contentDescription=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@string/iv_text&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@mipmap/ic_launcher&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/btn_test&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@string/tv_btn&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;32sp&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;string.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app_name&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;FindViewByIdDemo1&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;textview1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;textview3&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;test2&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;iv_text&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;图标&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tv_btn&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;btn&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;常规的即使用findViewById方法。即：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;textView1 = (TextView) findViewById(R.id.tv_demo1);
textView2 = (TextView) findViewById(R.id.tv_demo2);
textView3 = (TextView) findViewById(R.id.tv_demo3);
editText = (EditText) findViewById(R.id.et_test);
imageView = (ImageView) findViewById(R.id.iv_test);
button = (Button) findViewById(R.id.btn_test);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-android-develop-annotations-reflect-mvvm-01.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;h5&gt;0x02  注解&lt;/h5&gt;
&lt;p&gt;如何使用注解这种的避免传统的&lt;code&gt;findViewById&lt;/code&gt;呢。&lt;/p&gt;
&lt;p&gt;很多开源框架已经支持注解了，就以Android Annotations框架为例。&lt;/p&gt;
&lt;p&gt;View注解也分运行时注解和编译时注解。&lt;/p&gt;
&lt;p&gt;注解利用的原理也不一样，有的是利用反射，比如KJFrameForAndroid, xUtils, afinal, thinkAndroid，有的是利用aapt资源打包。反射自然效率比较低，在反射部分举例分析。&lt;/p&gt;
&lt;p&gt;ButterKnife处理注解是在编译的时候，处理了@Bind、@OnClick等这些注解，所以效率比较高。&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@BindView(R.id.tv_demo1)
TextView textView;
@BindView(R.id.tv_demo2)
TextView textView2;
@BindView(R.id.tv_demo3)
TextView textView3;
@BindView(R.id.iv_test)
ImageView imageView;
@BindView(R.id.btn_test)
Button button;
@BindView(R.id.et_test)
EditText editText;
//initView();
ButterKnife.bind(this);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-android-develop-annotations-reflect-mvvm-02.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;h5&gt;0x03  泛型&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;private &amp;lt;T extends View&amp;gt; T $(int resId) {
    return (T) super.findViewById(resId);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;textView1 = $(R.id.tv_demo1);
textView2 = $(R.id.tv_demo2);
textView3 = $(R.id.tv_demo3);
button = $(R.id.btn_test);
imageView = $(R.id.iv_test);
editText = $(R.id.et_test);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-android-develop-annotations-reflect-mvvm-03.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;h5&gt;0x04  反射&lt;/h5&gt;
&lt;p&gt;前面也说过，有些注解框架实现视图注入是利用的反射机制，反射执行的效率是很低的。以xutils为例，测试代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@ContentView(R.layout.activity_main)
public class MainActivity extends AppCompatActivity {

    @ViewInject(R.id.tv_demo1)
    TextView textView1;
    @ViewInject(R.id.tv_demo2)
    TextView textView2;
    @ViewInject(R.id.tv_demo3)
    TextView textView3;
    @ViewInject(R.id.btn_test)
    Button button;
    @ViewInject(R.id.iv_test)
    ImageView imageView;
    @ViewInject(R.id.et_test)
    EditText editText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        x.view().inject(this);
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在DDMS的测试结果如下。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-android-develop-annotations-reflect-mvvm-04.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;h5&gt;0x05  在线生成&lt;/h5&gt;
&lt;p&gt;Convert your Android XML layouts into a set of declarations and binds to save you all that manual typing. Enter a prefix for your fields, choose the scope paste in your XML and hit generate. Select "verbose" to find out why any fields are skipped.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://android.lineten.net/layout.php"&gt;http://android.lineten.net/layout.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;生成的结果如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-android-develop-annotations-reflect-mvvm-05.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;h5&gt;0x06  DataBinding&lt;/h5&gt;
&lt;p&gt;DataBinding是谷歌官方推出的一款数据绑定框架。&lt;/p&gt;
&lt;p&gt;使用起来比较方便，只需要在build.gradle文件里添加以下代码片段。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;android {
    ....
    dataBinding {
        enabled = true
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;具体的使用方法，网上也有很多，比如&lt;a href="https://github.com/LyndonChin/MasteringAndroidDataBinding"&gt;精通 Android Data Binding&lt;/a&gt;，以及&lt;a href="https://developer.android.com/topic/libraries/data-binding/index.html#build_environment"&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;layout&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;data&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;variable&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.sxau.findviewbyiddemo5.User&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/data&amp;gt;&lt;/span&gt;
    //界面代码
&lt;span class="nt"&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后Activity里可以使用&lt;code&gt;MainActivityBinding binding = DataBindingUtil.setContentView(this, R.layout.main_activity);&lt;/code&gt;进行数据绑定。&lt;/p&gt;
&lt;p&gt;前面的类即是根据xml文件名自动生成的。&lt;/p&gt;
&lt;p&gt;其中可以实现单向数据绑定。&lt;/p&gt;
&lt;h5&gt;0x07  源码实现&lt;/h5&gt;
&lt;p&gt;想了那么多避免传统的findViewById的方法，有的性能差不多，有的性能比较低，但是官方基础实现永远是性能最快的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;public final View findViewById(int id) {
    if (id &amp;lt; 0) {
        return null;
    }
    return findViewTraversal(id);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中调用了&lt;code&gt;findViewTraversal()&lt;/code&gt;方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;protected View findViewTraversal(@IdRes int id) {
    if (id == mID) {
        return this;
    }
    return null;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们通常是在Activity里&lt;code&gt;findViewById()&lt;/code&gt;，所以需要看Activity代码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;public View findViewById(@IdRes int id) {
    return getWindow().findViewById(id);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;getWindow()&lt;/code&gt;的对象是继承ViewGroup的，在ViewGroup里，重写了&lt;code&gt;findViewTraversal()&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;protected View findViewTraversal(@IdRes int id) {
    if (id == mID) {
        return this;
    }

    final View[] where = mChildren;
    final int len = mChildrenCount;

    for (int i = 0; i &amp;lt; len; i++) {
        View v = where[i];

        if ((v.mPrivateFlags &amp;amp; PFLAG_IS_ROOT_NAMESPACE) == 0) {
            v = v.findViewById(id);

            if (v != null) {
                return v;
            }
        }
    }

    return null;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中维护了一个View数组，然后从中遍历匹配，从而找到View对象。&lt;/p&gt;</summary><category term="Android"></category><category term="findViewById"></category><category term="注解"></category><category term="反射"></category></entry><entry><title>Android Decompiler / 初探反编译</title><link href="dubuqingfeng.github.io/posts/2016/%206/25/201606-android-security-decompiler/index.html" rel="alternate"></link><updated>2016-06-27T22:31:00+02:00</updated><author><name>admin</name></author><id>tag:,2016-06-25:dubuqingfeng.github.io/posts/2016/ 6/25/201606-android-security-decompiler/index.html</id><summary type="html">&lt;h5&gt;0x00  TOC&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;原理&lt;/p&gt;
&lt;p&gt;无混淆无加密无加壳&lt;/p&gt;
&lt;p&gt;仅混淆&lt;/p&gt;
&lt;p&gt;仅加密&lt;/p&gt;
&lt;p&gt;仅加壳&lt;/p&gt;
&lt;p&gt;自动化实现&lt;/p&gt;
&lt;p&gt;一些软件&lt;/p&gt;
&lt;p&gt;参考链接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;0x01  原理&lt;/h5&gt;
&lt;p&gt;首先在逆向领域，有一个是需要区别的。就是反汇编和反编译。&lt;/p&gt;
&lt;p&gt;反汇编把程序的原始机器码，翻译成较便于阅读理解的汇编代码。比如IDA、OD等。&lt;/p&gt;
&lt;p&gt;反编译，通常是将机器码(汇编语言)转换为高级编程语言。&lt;/p&gt;
&lt;p&gt;由于Java、.net这样的基于虚拟机技术的语言都是采用了ByteCode的二进制结构，因此很容易将ByteCode转化为“抽象语法树”（简称AST，《编译原理》这门课中的概念），然后采用反编译器就可以将AST转换为代码了。&lt;/p&gt;
&lt;p&gt;详细可以参考乌云上的文章&lt;a href="http://drops.wooyun.org/papers/13686"&gt;反编译系列教程(上)&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;0x02  无混淆无加密无加壳&lt;/h5&gt;
&lt;p&gt;一个Android程序，如果没有进行混淆，加密，加壳等行为时，如果进行反编译的话，是可以逆向到Java源码的。&lt;/p&gt;
&lt;p&gt;1.&lt;a href="https://github.com/pxb1988/dex2jar"&gt;Dex2Jar&lt;/a&gt;和&lt;a href="https://github.com/java-decompiler/jd-gui"&gt;JD-GUI&lt;/a&gt;(或者Jad)&lt;/p&gt;
&lt;p&gt;先通过Dex2Jar软件将&lt;code&gt;classes.dex&lt;/code&gt;转换为jar文件，然后再通过Java反编译工具JD-GUI将jar文件转换成JAVA源文件。&lt;/p&gt;
&lt;p&gt;总之这是通过dex转jar，然后再转java源代码的思路。其中dex转jar也可以选择一些其他软件，例如谷歌官方的&lt;a href="https://github.com/google/enjarify"&gt;enjarify&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下载Dex2Jar和Jd-gui的地址：&lt;/p&gt;
&lt;p&gt;Dex2Jar:&lt;a href="https://github.com/pxb1988/dex2jar/releases"&gt;https://github.com/pxb1988/dex2jar/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JD-GUI:&lt;a href="http://jd.benow.ca/"&gt;http://jd.benow.ca/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用Dex2Jar和Jd-gui的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dex2jar &amp;lt;file0&amp;gt;
//即
./d2j-dex2jar.sh xxx.apk
java -jar jd-gui-x.y.z.jar
//或者是
java -classpath jd-gui-x.y.z.jar org.jd.gui.App
//也可以直接运行客户端
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下即为反汇编出来的结果。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-android-security-decompiler-01.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;2.APK改之理、APKDB、Android逆向助手、Android Killer之类软件&lt;/p&gt;
&lt;p&gt;实际本质上还是通过Dex2jar或者apktool工具的封装。&lt;/p&gt;
&lt;p&gt;还有一个Jadx的软件也比较好用。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-android-security-decompiler-02.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;3.在线反编译网站&lt;/p&gt;
&lt;p&gt;地址：&lt;a href="http://www.decompileandroid.com/"&gt;http://www.decompileandroid.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;地址：&lt;a href="http://www.ludaima.cn/android.html"&gt;http://www.ludaima.cn/android.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只需要上传需要反编译的apk，稍等片刻，即可下载源码。&lt;/p&gt;
&lt;p&gt;4.smali和Baksmali以及&lt;a href="http://blog.avlyun.com/show/%E3%80%8Asv%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97%E3%80%8B/"&gt;Smali Viewer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;smali是将smali文件转换成dex。&lt;/p&gt;
&lt;p&gt;Baksmali和smali相反，将dex转换成smali。&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://www.quora.com/What-is-smali-in-Android"&gt;Quora的一篇问答&lt;/a&gt;中，介绍了smali和baksmali的作用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Smali/Baksmali is an assembler/disassembler for the dex format used by dalvik,
 Android&amp;#39;s Java VM implementation. The names &amp;quot;Smali&amp;quot; and &amp;quot;Baksmali&amp;quot; are the
  Icelandic equivalents of &amp;quot;assembler&amp;quot; and &amp;quot;disassembler&amp;quot; respectively.
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x03  仅混淆&lt;/h5&gt;
&lt;p&gt;通常Android混淆方法，有ProGuard、DexGuard和APKfuscator等。&lt;/p&gt;
&lt;p&gt;怎样使用ProGuard对Android项目源码进行混淆保护，在Android Studio中build.gradle，修改以下代码片段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;release {
    minifyEnabled true
    proguardFiles getDefaultProguardFile(&amp;#39;proguard-android-optimize.txt&amp;#39;),
     &amp;#39;proguard-rules.pro&amp;#39;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将&lt;code&gt;minifyEnabled&lt;/code&gt;改为true。去除无效资源的话需要添加&lt;a href="http://tools.android.com/tech-docs/new-build-system/resource-shrinking"&gt;&lt;code&gt;shrinkResources true&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;proguard-rules.pro&lt;/code&gt;文件中，编写一些特定框架的混淆规则。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# ProGuard configurations for Bugtags
-keepattributes LineNumberTable,SourceFile

-keep class com.bugtags.library.** {*;}
-dontwarn org.apache.http.**
-dontwarn android.net.http.AndroidHttpClient
-dontwarn com.bugtags.library.**
# End Bugtags

# retrofit
-dontwarn retrofit2.**
-keep class retrofit2.** { *; }
-keepattributes Signature
-keepattributes Exceptions

# android-async-http
-dontwarn android-async-http-1.4.9.jar.**
-keep class android-async-http-1.4.9.jar.**{*;}
-keep class org.apache.http.** {*; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;并且混淆时需要对使用的框架进行混淆，或者是避免混淆一些类。这时就对框架的文档进行阅读，分析需要增加的混淆规则。&lt;/p&gt;
&lt;p&gt;混淆的效果如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-android-security-decompiler-03.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;以及加速gradle编译的配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;org.gradle.daemon=true
org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:
+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
org.gradle.parallel=true
org.gradle.configureondemand=true
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如何对抗这种混淆呢？这种混淆仅仅是增大了阅读难度，在反汇编之后，类名变成了a,b,c之类的。&lt;/p&gt;
&lt;p&gt;dex2jar作者在&lt;a href="http://secwiki.neu.edu.cn/wiki/images/e/eb/Android%E6%B7%B7%E6%B7%86%E6%8A%80%E5%B7%A7%E4%B8%8E%E5%8F%8D%E6%B7%B7%E6%B7%86_%E5%B0%8F%E6%B3%A2.pdf"&gt;Android混淆技巧与反混淆&lt;/a&gt;中谈到，ProGuard有Shrinking、Optimization、Name Obfuscation、Removal of logging code等功能。在面对名字替换时，有阅读源代码、JEB、ProGuard分析等方法，Flanker大牛也分享过利用&lt;a href="http://drops.wooyun.org/mobile/6665"&gt;JEB API编写插件分析&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;默认的混淆规则在&lt;a href="https://android.googlesource.com/platform/sdk/+/master/files/proguard-android.txt"&gt;proguard-android.txt&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;可以使用Proguard再混淆一次，利用自己写的规则Mapping文件。&lt;/p&gt;
&lt;p&gt;这里以一个文件为例。进行Proguard的混淆以及反混淆。&lt;/p&gt;
&lt;p&gt;在Proguard配置文件中，添加如下语句，可打印出默认混淆规则的Mapping文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-printmapping mapping.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在修改好对应的值以后，利用以下语句，应用Mapping文件，再建一个项目，分析对应的代码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-applymapping mapping.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-android-security-decompiler-04.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-android-security-decompiler-05.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;这样反混淆了以后，降低了代码阅读的难度，增加了应用被破解的风险。&lt;/p&gt;
&lt;h5&gt;0x04  仅加密&lt;/h5&gt;
&lt;p&gt;加密方式有很多种，本文不能面面俱到，只能找出一些典型的。比如有流程混排加密、代码内部字符串加密，对so源码、so函数名称以及接口调用进行加密隐藏，对classes.dex中的所有函数功能代码进行提取，然后加密单独存放等。&lt;/p&gt;
&lt;p&gt;当然如果面面俱到，文章篇幅就比较长了，并且实践、研究花费的时间也比较多。这里就举比较简单的例子。&lt;/p&gt;
&lt;p&gt;Android签名校验：&lt;/p&gt;
&lt;p&gt;在android程序中，可以使用以下代码进行签名的获取。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;public int getSignature(String packageName) {
    PackageManager pm = this.getPackageManager();
    PackageInfo pi = null;
    int sig = 0;
    try {
        pi = pm.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
        Signature[] s = pi.signatures;
        sig = s[0].hashCode();
    } catch (Exception e1) {
        sig = 0;
        e1.printStackTrace();
    }
    return sig;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以在APP每次访问服务器的时候，携带上当前APP的签名，服务端做个签名验证，如果不对，直接不通过，返回客户端信息，然后客户端进行一定的处理。当然这样的话破解者也可以通过抓包的方式，抓取到签名验证的包，然后每次通信时修改对应的包即可。&lt;/p&gt;
&lt;h5&gt;0x05  仅加壳&lt;/h5&gt;
&lt;p&gt;so加壳，upx是最为so加壳的首选，以前在PC端也做过&lt;a href="http://qingfeng520.blog.51cto.com/7098444/1256106"&gt;upx的脱壳&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里做个示例，加壳so。&lt;/p&gt;
&lt;p&gt;在前一篇文章里，涉及到了如何在so里打log文件。在写好jni代码了以后，将so文件复制出来。&lt;/p&gt;
&lt;p&gt;然后添加到文件夹里，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-android-security-decompiler-06.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;准备UPX壳编译环境：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;zlib-1.2.8.tar.gz
ucl-1.03.tar.gz
lzma443.tar.bz2
upx-hg-68db2e569c63.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编译安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;cd ucl-1.03&lt;/span&gt;
&lt;span class="x"&gt;./configure --prefix=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="x"&gt;/../../upx-hg-6cd5982ece4f/build&lt;/span&gt;
&lt;span class="x"&gt;make&lt;/span&gt;
&lt;span class="x"&gt;cd zlib-1.2.8&lt;/span&gt;
&lt;span class="x"&gt;./configure --prefix=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="x"&gt;/../../upx-hg-6cd5982ece4f/build&lt;/span&gt;
&lt;span class="x"&gt;make&lt;/span&gt;
&lt;span class="x"&gt;vi .bash_profile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置环境变量。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;export UPX_UCLDIR=/Users/qingfeng/software/upx/libs/ucl-1.03
export UPX_ZLIBDIR=/Users/qingfeng/software/upx/libs/zlib-1.2.8
export UPX_LZMADIR=/Users/qingfeng/software/upx/libs/lzma443
export UPX_LZMA_VERSION=0x443
export UPX_DIR=/Users/qingfeng/software/upx/upx-hg-68db2e569c63
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看环境变量的命令env，应用环境变量的命令&lt;code&gt;source .bash_profile&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后在编译&lt;code&gt;make all&lt;/code&gt;的过程中，遇到了以下的错误。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./bele_policy.h:156:9: error: unused typedef &amp;#39;acc_cta_t__39&amp;#39; [-Werror,-Wunused-local-typedef]
        COMPILE_TIME_ASSERT(sizeof(U16) == 2)
        ^
./conf.h:359:34: note: expanded from macro &amp;#39;COMPILE_TIME_ASSERT&amp;#39;
#define COMPILE_TIME_ASSERT(e)   ACC_COMPILE_TIME_ASSERT(e)
./miniacc.h:1563:54: note: expanded from macro &amp;#39;ACC_COMPILE_TIME_ASSERT&amp;#39;
#    define ACC_COMPILE_TIME_ASSERT(e)  {typedef int __ACC_CTA_NAME(acc_cta_t__)[1-2*!(e)];}
./miniacc.h:1531:37: note: expanded from macro &amp;#39;__ACC_CTA_NAME&amp;#39;
#  define __ACC_CTA_NAME(a)         ACC_PP_ECONCAT2(a,__COUNTER__)
./miniacc.h:331:41: note: expanded from macro &amp;#39;ACC_PP_ECONCAT2&amp;#39;
#define ACC_PP_ECONCAT2(a,b)            ACC_PP_CONCAT2(a,b)
./miniacc.h:325:41: note: expanded from macro &amp;#39;ACC_PP_CONCAT2&amp;#39;
#define ACC_PP_CONCAT2(a,b)             a ## b
&amp;lt;scratch space&amp;gt;:183:1: note: expanded from here
acc_cta_t__39
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;无论是upx是3.9.1，还是最新版，无论lzma是443版本还是最新版1610，编译的时候都会出现这个问题&lt;/p&gt;
&lt;p&gt;然后试着升级了一下g++的版本，mac自带的是4.2版本，用brew升级到了4.8，然后用zsh的alias功能（vi .zshrc）将自带的替换掉，然后再编译还是不行，最后还是使用ubuntu进行编译吧。&lt;/p&gt;
&lt;p&gt;然后就下了一个16.04的镜像，然后跑起了虚拟机，下载并&lt;a href="http://www.chinapyg.com/thread-77929-1-1.html"&gt;编译那些依赖&lt;/a&gt;，然后在upx目录下&lt;code&gt;make all&lt;/code&gt;的过程中，出现了以下的问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;compress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;cpp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fatal&lt;/span&gt; &lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;zlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;
     &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;zlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;没找到&lt;code&gt;zlib.h&lt;/code&gt;，可是自己在zlib那也&lt;code&gt;make&lt;/code&gt;了啊，在查找资料的过程中，试着在zlib目录&lt;code&gt;make install&lt;/code&gt;了一下，然后就编译完成了，在src目录下也有&lt;code&gt;./upx.out&lt;/code&gt;了，版本是3.9.2。&lt;/p&gt;
&lt;p&gt;这个时候就应该考虑so的init段的问题了。据这篇文章说，加壳的文件中需要有INIT段，添加init段的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;void _init(void){} \\c++
extern &amp;quot;C&amp;quot; {void _init(void){}}    \\c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后加壳的命令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./upx.out -f -o libdemo_upx.so libdemo.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后脱壳自然-d参数即可，需要判断标志是否为UPX!，以及处理变形等问题，脱完壳就可以使用IDA进行android的so分析了。&lt;/p&gt;
&lt;h5&gt;0x06  自动化实现&lt;/h5&gt;
&lt;p&gt;如何实现一些自动化脚本，进行反汇编的还原工作。&lt;/p&gt;
&lt;p&gt;当然网上已经有人实现过相关内容，比如Mac下的&lt;a href="https://github.com/dirkvranckaert/AndroidDecompiler"&gt;AndroidDecompiler&lt;/a&gt;，或者是&lt;a href="https://github.com/luckyandyzhang/easy-android-decompiler"&gt;easy-android-decompiler&lt;/a&gt;。&lt;/p&gt;
&lt;h5&gt;0x07  一些软件&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Baksmali 和 Dedexer&lt;/p&gt;
&lt;p&gt;apktool&lt;/p&gt;
&lt;p&gt;JEB&lt;/p&gt;
&lt;p&gt;jadx&lt;/p&gt;
&lt;p&gt;jdgui&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DEX转jar：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;enjarify&lt;/p&gt;
&lt;p&gt;dex2jar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;app调试器：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://gikir.com/product.php"&gt;gikdbg&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码混淆软件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Proguard&lt;/p&gt;
&lt;p&gt;DashO&lt;/p&gt;
&lt;p&gt;Dexguard&lt;/p&gt;
&lt;p&gt;DexProtector&lt;/p&gt;
&lt;p&gt;ApkProtect&lt;/p&gt;
&lt;p&gt;Shield4j&lt;/p&gt;
&lt;p&gt;Stringer&lt;/p&gt;
&lt;p&gt;Allitori&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对抗混淆：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/CalebFenton/dex-oracle"&gt;dex-oracle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/CalebFenton/simplify"&gt;simplify&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/konloch/bytecode-viewer"&gt;bytecode-viewer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Juude/droidReverse"&gt;逆向工程集&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;0x08  参考链接&lt;/h5&gt;
&lt;p&gt;当然实际情况是混淆，加密，加壳综合起来的，实际情况要具体分析。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://drops.wooyun.org/tips/2871"&gt;一次app抓包引发的Android分析记录&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kiya.space/2015/11/12/Android-security-tools/"&gt;Android 安全工具包（持续更新）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/guolin_blog/article/details/49738023"&gt;Android安全攻防战，反编译与混淆技术完全解析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://drops.wooyun.org/mobile/12172"&gt;Android应用安全开发之源码安全&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wjdiankong.cn/blog/android%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85-%E5%8F%8D%E7%BC%96%E8%AF%91%E5%88%A9%E5%99%A8apktool%E5%92%8Cjadx%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E9%94%99%E8%AF%AF%E7%BA%A0/"&gt;Android逆向之旅—反编译利器Apktool和Jadx源码分析以及错误纠正&lt;/a&gt;&lt;/p&gt;</summary><category term="Android安全"></category><category term="Decompiler"></category><category term="反编译"></category></entry><entry><title>LogCat 及 Log 的一些思考</title><link href="dubuqingfeng.github.io/posts/2016/%206/21/201606-android-security-logcat-log-thinks/index.html" rel="alternate"></link><updated>2016-06-23T18:27:00+02:00</updated><author><name>admin</name></author><id>tag:,2016-06-21:dubuqingfeng.github.io/posts/2016/ 6/21/201606-android-security-logcat-log-thinks/index.html</id><summary type="html">&lt;h5&gt;0x00  TOC&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;原理&lt;/p&gt;
&lt;p&gt;smali注入&lt;/p&gt;
&lt;p&gt;手机查看log并导出&lt;/p&gt;
&lt;p&gt;so打log&lt;/p&gt;
&lt;p&gt;发布(release)版屏蔽Log输出&lt;/p&gt;
&lt;p&gt;查看内核日志&lt;/p&gt;
&lt;p&gt;参考链接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;0x01  原理&lt;/h5&gt;
&lt;p&gt;常见的一些打Log的语句&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Log.i(TAG, &amp;quot;&amp;quot;);
Log.d(TAG, &amp;quot;&amp;quot;);
Log.e(TAG, &amp;quot;&amp;quot;);
Log.v(TAG, &amp;quot;&amp;quot;);
Log.w(TAG, &amp;quot;&amp;quot;);
Log.wtf(TAG, &amp;quot;&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Log给开发者开放了6种级别(分别对应info，debug，error，verbose，warning，assert)，隐藏了两种级别:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;F — Fatal
S — Silent (highest priority, on which nothing is ever printed)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过阅读&lt;a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/util/Log.java"&gt;Log的代码&lt;/a&gt;，里面说明了通过&lt;code&gt;println_native(LOG_ID_MAIN, Priority, tag, msg);&lt;/code&gt;代码进行输出了日志。并声明了LOG_ID_MAIN、LOG_ID_RADIO、LOG_ID_EVENTS、LOG_ID_SYSTEM、LOG_ID_CRASH五个缓冲区。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;println_native()&lt;/code&gt;的代码在&lt;a href="http://www.netmite.com/android/mydroid/frameworks/base/core/jni/android_util_Log.cpp"&gt;&lt;code&gt;frameworks/base/core/jni/android_util_log.cpp&lt;/code&gt;&lt;/a&gt;，其中判断了msg是否为空，如果为空，抛出空指针异常。&lt;/p&gt;
&lt;p&gt;其中levels_t是一个结构体，其中包括了那六种级别，其中&lt;code&gt;assert&lt;/code&gt;，查阅代码可得知，如果利用Log.wtf()方法，就会打印一个标志成ASSERT的错误。&lt;/p&gt;
&lt;p&gt;并通过以下函数进行了打印操作。即&lt;a href="https://github.com/cgjones/android-system-core/blob/master/liblog/logd_write.c"&gt;__android_log_buf_write&lt;/a&gt;。在&lt;code&gt;__android_log_buf_write&lt;/code&gt;函数里通过调用&lt;code&gt;write_to_log&lt;/code&gt;函数进行打印。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;int res = __android_log_buf_write(bufID, (android_LogPriority)priority, tag, msg);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后&lt;code&gt;write_to_log&lt;/code&gt;是怎样的情况呢，在文件45行有以下信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;static int (*write_to_log)(log_id_t, struct iovec *vec, size_t nr) = __write_to_log_init;
static int __write_to_log_init(log_id_t, struct iovec *vec, size_t nr);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后追溯到&lt;code&gt;__write_to_log_init&lt;/code&gt;这个函数里，这个函数其中有一些打开文件等的操作，然后&lt;code&gt;__write_to_log_kernel&lt;/code&gt;这个就写入到文件里。&lt;/p&gt;
&lt;p&gt;具体底层Log设备Logger机制，就不再阐述，如果细研下去，就是另一篇文章了，并且嵌入式的同学还学到了&lt;code&gt;ioctl&lt;/code&gt;函数，这需要一些Linux驱动方面的知识。&lt;/p&gt;
&lt;p&gt;LogCat是如何获取Log的？通过&lt;a href="https://github.com/cgjones/android-system-core/blob/master/logcat/logcat.cpp"&gt;&lt;code&gt;logcat.cpp&lt;/code&gt;&lt;/a&gt;，可以知道，定义了一个Log文件目录，即&lt;code&gt;#define LOG_FILE_DIR    "/dev/log/"&lt;/code&gt;。具体读取log的过程，可以参考田海立的文章－&lt;a href="http://blog.csdn.net/thl789/article/details/6638344"&gt;解读Android LOG机制的实现：（5）获取LOG的应用程序LogCat
&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如何去修改logcat的显示颜色呢，可以通过&lt;a href="http://blog.csdn.net/hotlinhao/article/details/9150519"&gt;android studio的设置&lt;/a&gt;，也可以安装一个&lt;a href="https://github.com/marshall/logcat-color"&gt;logcat-color&lt;/a&gt;直接改变颜色，通过以下命令。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ logcat-color -e &lt;span class="p"&gt;|&lt;/span&gt; egrep &lt;span class="s1"&gt;&amp;#39;(Tag1|Tag2)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x02  smali注入&lt;/h5&gt;
&lt;p&gt;通过以下命令，进行apktool反编译&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apktool d xxx.apk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在合适位置插入以下语句，其中v0为寄存器，尽量不要随意添加寄存器。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;invoke-static {v0, v0}, Landroid/util/Log;-&amp;gt;e(Ljava/lang/String;Ljava/lang/String;)I
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后进行打包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apktool b xxx -o xxx.apk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打包完安装需要签名，由于已经有了android.keystore ，这里使用jarsigner进行签名。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;jarsigner -verbose -keystore android.keystore -signedjar android_signed.apk app.apk android.keystore
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行即可看到Log信息。&lt;/p&gt;
&lt;h5&gt;0x03  手机查看log并导出&lt;/h5&gt;
&lt;p&gt;如何在手机上读取其他应用的log并可以导出呢，谷歌在4.1以后禁止了相关权限，改为了&lt;code&gt;signature|system|development&lt;/code&gt;权限。就算有android.PREMISSION.READ_LOGS，也读取不到其他应用的log了。只能root以后查看。&lt;/p&gt;
&lt;p&gt;在谷歌Android Developer论坛里也有&lt;a href="https://groups.google.com/forum/?fromgroups#!topic/android-developers/6U4A5irWang"&gt;相关讨论&lt;/a&gt;。在4.1之后，禁止了去阅读其他应用log的权限。&lt;/p&gt;
&lt;p&gt;并且在google play商店上也有几款手机上查看log的软件，需要root权限。比如&lt;a href="https://play.google.com/store/apps/details?id=com.nolanlawson.logcat&amp;amp;hl=en"&gt;CatLog - Logcat Reader!&lt;/a&gt;，&lt;a href="https://play.google.com/store/apps/details?id=org.jtb.alogcat&amp;amp;hl=en"&gt;aLogcat (free) - logcat
&lt;/a&gt;等。aLogCat也开源了，地址在&lt;a href="https://github.com/nolanlawson/Catlog"&gt;GitHub上&lt;/a&gt;。&lt;/p&gt;
&lt;h5&gt;0x04  so打log&lt;/h5&gt;
&lt;p&gt;如何在so文件，即jni开发中里打log呢&lt;/p&gt;
&lt;p&gt;这里如何配置NDK就不再叙述。详细可参考&lt;a href="https://developer.android.com/ndk/guides/index.html"&gt;ndk官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要在cpp文件中添加以下语句：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;android/log.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//打印相关信息&lt;/span&gt;
&lt;span class="n"&gt;__android_log_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ANDROID_LOG_DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Java_com_sxau_ndkdemo_MainActivity_getStringFromC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在build.gradle文件里，修改成以下片段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ndk {
    moduleName &amp;quot;JniDemo&amp;quot;
    ldLibs(&amp;quot;log&amp;quot;, &amp;quot;z&amp;quot;, &amp;quot;m&amp;quot;)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;引入&lt;code&gt;liblog.h&lt;/code&gt;，或者通过自定义&lt;code&gt;Android.mk&lt;/code&gt;进行导入。&lt;/p&gt;
&lt;p&gt;可以通过一些宏定义定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define LOG_TAG &amp;quot;ANDROID_LAB&amp;quot;  
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)  
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x05  发布(release)版屏蔽Log输出&lt;/h5&gt;
&lt;p&gt;一种方法是通过添加一个Log辅助类，配置级别，或者通过变量控制显示。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;public class Log {
    public static int logLevel = Log.VERBOSE;

    public static void i(String tag, String msg) {
        if (logLevel &amp;lt;= Log.INFO)
            android.util.Log.i(tag, msg);
    }

    public static void e(String tag, String msg) {
        if (logLevel &amp;lt;= Log.ERROR)
            android.util.Log.e(tag, msg);
    }

    public static void d(String tag, String msg) {
        if (logLevel &amp;lt;= Log.DEBUG)
            android.util.Log.d(tag, msg);
    }

    public static void v(String tag, String msg) {
        if (logLevel &amp;lt;= Log.VERBOSE)
            android.util.Log.v(tag, msg);
    }

    public static void w(String tag, String msg) {
        if (logLevel &amp;lt;= Log.WARN)
            android.util.Log.w(tag, msg);
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用时直接使用这个Log类打印方法。&lt;/p&gt;
&lt;p&gt;release版屏蔽log输出，另外一种方法是，可以通过ProGuard的方式，将log语句删除。&lt;/p&gt;
&lt;p&gt;ProGuard是Android SDK的一部分。只需要开启即可。&lt;/p&gt;
&lt;p&gt;在android studio中，编辑build.gradle文件，配置如下代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;android {
...
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile(&amp;#39;proguard-android.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;后来gradle的runProguard更名为minifyEnabled，所以直接改为true即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;proguardFiles getDefaultProguardFile(&amp;#39;proguard-android.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意这段位置，本来按默认的配置一直没有消除成功，直到看了一篇&lt;a href="http://blog.csdn.net/weizaishouex2010/article/details/49866621"&gt;文章&lt;/a&gt;以后，改为了&lt;code&gt;proguard-android-optimize.txt&lt;/code&gt;，才屏蔽输出成功。即：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;release {
    minifyEnabled true
    proguardFiles getDefaultProguardFile(&amp;#39;proguard-android-optimize.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改Proguard的配置文件&lt;code&gt;proguard-rules.pro&lt;/code&gt;，添加以下配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-assumenosideeffects class android.util.Log {
    public static int v(...);
    public static int i(...);
    public static int w(...);
    public static int d(...);
    public static int e(...);
}

-assumenosideeffects class java.io.PrintStream{
    public void println(%);
    public void println(**);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即结果。然后打包签名输出就不会有log日志了。&lt;/p&gt;
&lt;h5&gt;0x06  查看内核日志&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./adb shell
su
dmesg
cat /proc/kmsg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dmesg是内核中的一个命令，可以查看内核日志，当然，也可以用&lt;code&gt;cat/proc/kmsg&lt;/code&gt;。两者不同的是，dmesg只读取缓冲区中的内核日志，而&lt;code&gt;cat /proc/kmsg&lt;/code&gt;则可以原始的、完整的日志文件。&lt;/p&gt;
&lt;h5&gt;0x07  参考链接&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/reference/android/util/Log.html"&gt;Google API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://drops.wooyun.org/tips/3812"&gt;Android LogCat Security&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/25149481/can-logcat-be-used-to-log-ndk-code-in-android-or-what-are-logging-options-from"&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://book.douban.com/subject/19986441/"&gt;android系统源代码情景分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/zgjxwl/article/details/6234025"&gt;如何在JNI编程中使用logCat&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Android安全"></category><category term="Log"></category><category term="LogCat"></category></entry><entry><title>捕捉android网络流量及中间人攻击</title><link href="dubuqingfeng.github.io/posts/2016/%206/17/201606-capture-android-mitm/index.html" rel="alternate"></link><updated>2016-06-18T18:34:00+02:00</updated><author><name>admin</name></author><id>tag:,2016-06-17:dubuqingfeng.github.io/posts/2016/ 6/17/201606-capture-android-mitm/index.html</id><summary type="html">&lt;h5&gt;0x01   前言：&lt;/h5&gt;
&lt;p&gt;作为开发者或者安全研究员，开发或分析一些与网络相关的程序时，必然要涉及到HTTP协议，而了解信息的传输，是非常必要的。所以我们需要抓取并控制到网路流量，并且需要对中间人攻击有一定的认识。&lt;/p&gt;
&lt;p&gt;TOC：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;捕捉网络流量&lt;/p&gt;
&lt;p&gt;Charles抓包工具&lt;/p&gt;
&lt;p&gt;利用ettercap进行中间人&lt;/p&gt;
&lt;p&gt;MITM工具&lt;/p&gt;
&lt;p&gt;中间人的利用&lt;/p&gt;
&lt;p&gt;参考链接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;0x02    捕捉网络流量&lt;/h5&gt;
&lt;p&gt;需要一些nc、wireshark、tcpdump for Android软件。&lt;/p&gt;
&lt;p&gt;wireshark可通过以下代码进行安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew cask install wireshark
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;netcat可通过以下代码进行安装；&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew install netcat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后下载好&lt;strong&gt;TCPdump for android&lt;/strong&gt;，注意是可执行文件，不是文件扩展名为bin的。&lt;/p&gt;
&lt;p&gt;然后usb线连接好设备，或者启动虚拟机。&lt;/p&gt;
&lt;p&gt;进入&lt;strong&gt;platform-tools&lt;/strong&gt;文件夹，输入以下的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;查看连接的设备：
./adb devices
通过adb执行android命令
./adb shell
su
mkdir /data/tcpdump/
chmod 755 /data/tcpdump/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过数据线或者其他adb push的方式，将&lt;strong&gt;tcpdump&lt;/strong&gt;复制到设备的&lt;strong&gt;/data/tcpdump/&lt;/strong&gt;文件夹。&lt;/p&gt;
&lt;p&gt;在android设备里执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./adb shell
su
chmod 755 /data/tcpdump/tcpdump
或者是以下这个：
./adb shell chmod 755 /data/tcpdump/tcpdump
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后确认一下android设备中是否安装有&lt;strong&gt;netcat&lt;/strong&gt;，可以通过nc命令来判断是否安装。&lt;/p&gt;
&lt;p&gt;以下是：在android端转发流量的命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./data/tcpdump/tcpdump -w - | nc -l -p 31337
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要配置adb的端口转发：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./adb forward tcp:12345 tcp:31337
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后pc端需要nc转发流量，然后wireshark进行分析。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;netcat 127.0.0.1 12345 | wireshark -k -S -i -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装配置好捕捉流量，wireshark分析：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-capture-android-mitm-01.gif" class="responsive-img"&gt;&lt;/p&gt;
&lt;h5&gt;0x03    Charles抓包工具的使用&lt;/h5&gt;
&lt;p&gt;安装并配置Charles。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew cask install charles
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;捕捉HTTP流量：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-capture-android-mitm-02.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;手机上设置代理，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-capture-android-mitm-03.gif" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;捕捉HTTPS流量：&lt;/p&gt;
&lt;p&gt;安装证书：&lt;/p&gt;
&lt;p&gt;下载Charles证书http://www.charlesproxy.com/getssl/，输入文件名进行安装。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-capture-android-mitm-04.gif" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;在Charles的工具栏上点击设置按钮，选择SSL Proxy Settings；选项卡的Locations表单可以填写要抓包的域名和端口，点击Add按钮，在弹出的表单中Host填写域名，比如填*，Port填443。默认的空值表示应用于所有地址。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-capture-android-mitm-05.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;0x04    利用ettercap进行中间人
ettercap是linux上常用的一种中间人工具，作为网上的一种sniffer，曾经利用其接收到机房的广播出来的数据包。&lt;/p&gt;
&lt;p&gt;MAC系统上如何利用其进行中间人攻击呢？&lt;/p&gt;
&lt;p&gt;ettercap安装与配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo brew install ettercap --with-gtk+
sudo port install driftnet
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而driftnet是一款简单而使用的图片捕获工具，可以很方便的在网络数据包中抓取图片。可以利用其和ettercap进行抓取局域网中的图片。&lt;/p&gt;
&lt;p&gt;ARP欺骗：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ettercap -i eth0 -T -M arp:remote /10.0.0.1/ // 欺骗局域网内所有主机
其他的命令可以通过-h --help来查看帮助。
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x05    MITM工具&lt;/h5&gt;
&lt;p&gt;常见的有dSploit，zANTI。&lt;/p&gt;
&lt;p&gt;android设备使用dSploit进行中间人攻击：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-capture-android-mitm-06.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;h5&gt;0x06    中间人的利用&lt;/h5&gt;
&lt;p&gt;当成为中间人了以后，就可以进行各种利用了，比如查看流量，网页劫持，提取密码，会话劫持等。&lt;/p&gt;
&lt;p&gt;以弹对话框为例：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201606-capture-android-mitm-07.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;h5&gt;0x07    参考链接&lt;/h5&gt;
&lt;p&gt;热爱互联网，对操作系统和网络安全有狂热的追求，专业不限；熟悉漏洞挖掘、网络安全攻防技术，了解常见黑客攻击手法；掌握基本开发能力，熟练使用C/C++语言；对数据库、操作系统、网络原理有较好掌握；具有软件逆向，网络安全攻防或安全系统开发经验者优先。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.bettercap.org/"&gt;bettercap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.91ri.org/4408.html"&gt;Linux渗透之Ettercap详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://xkon.github.io/2015/04/17/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B0%8Ftricks/"&gt;内网渗透小tricks&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Android安全"></category><category term="mitm"></category></entry><entry><title>自己动手写drozer模块</title><link href="dubuqingfeng.github.io/posts/2016/%206/08/201606-write-drozer-module/index.html" rel="alternate"></link><updated>2016-06-09T18:34:00+02:00</updated><author><name>admin</name></author><id>tag:,2016-06-08:dubuqingfeng.github.io/posts/2016/ 6/08/201606-write-drozer-module/index.html</id><summary type="html">&lt;h5&gt;0x01    前言及TOC&lt;/h5&gt;
&lt;p&gt;drozer是一个android渗透与测试比较出名的一个框架，其源码托管在&lt;a href="https://github.com/mwrlabs/drozer"&gt;GitHub&lt;/a&gt;。我们可以利用其进行一些自动化测试工作，以及测试一些拒绝式服务，写一些exploit等。&lt;/p&gt;
&lt;p&gt;TOC：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;安装与配置drozer&lt;/p&gt;
&lt;p&gt;安装模块&lt;/p&gt;
&lt;p&gt;动手写一些模块&lt;/p&gt;
&lt;p&gt;drozer module&lt;/p&gt;
&lt;p&gt;自动化测试脚本思考&lt;/p&gt;
&lt;p&gt;后记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;0x02    安装与配置drozer&lt;/h5&gt;
&lt;p&gt;mac10.11系统：
安装配置好python，然后使用下面的命令，或者pip安装也可以。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo easy_install --allow-hosts pypi.python.org protobuf==2.4.1
sudo easy_install twisted==10.2.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;遇到了如下的问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Setup&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;exited&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;clang&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在github上的仓库上寻找方案。其中&lt;a href="https://github.com/mwrlabs/drozer/issues/155"&gt;ISSUE#155&lt;/a&gt;叙述了这个问题。但是官网的2.3.4并没有修复依赖。&lt;/p&gt;
&lt;p&gt;于是应该clone这个仓库进行安装。然后修复更新的是develop分支，就是clone这个分支的事情了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo easy_install pyopenssl==0.15
git clone https://github.com/mwrlabs/drozer.git -b develop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后&lt;strong&gt;sudo python setup.py install&lt;/strong&gt;即可&lt;/p&gt;
&lt;p&gt;并且&lt;strong&gt;/usr/local/lib/python2.7/site-packages/drozer-2.3.4-py2.7.egg/drozer/lib/aapt&lt;/strong&gt;这个需要配置好755权限。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo chmod 755 /usr/local/lib/python2.7/site-packages/drozer-2.3.4-py2.7.egg/drozer/lib/aapt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置drozer，需要在android端也安装好对应的agent&lt;/p&gt;
&lt;p&gt;连接上android设备，并打开调试，允许安装未知来源的应用。&lt;/p&gt;
&lt;p&gt;然后&lt;strong&gt;adb install drozer.apk&lt;/strong&gt;，或者在官网下载apk包，传到android设备上安装。&lt;/p&gt;
&lt;p&gt;之后打开drozer应用，并且设备通过USB线连接上，并设置好端口转发：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;adb forward tcp:31415 tcp:31415
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后启动drozer应用上的嵌入式服务，&lt;strong&gt;Embedded Server&lt;/strong&gt;，然后按一下&lt;strong&gt;Embedded Server&lt;/strong&gt;滑块，再将&lt;strong&gt;Disabled&lt;/strong&gt;滑块拖到右边。&lt;/p&gt;
&lt;p&gt;然后计算机设备上就可以通过下面这条命令连接到drozer console了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;drozer console connect
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以进行一些常见的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;枚举已安装的包：
run app.package.list
查看application信息：
run app.package.info -a application_name
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x03    安装模块&lt;/h5&gt;
&lt;p&gt;打开&lt;strong&gt;drozer console&lt;/strong&gt;，执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; [&lt;span class="n"&gt;path-to-your-module-dir&lt;/span&gt;]
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; [&lt;span class="n"&gt;pach-to-your-module-dir&lt;/span&gt;]/[&lt;span class="n"&gt;module-name&lt;/span&gt;](&lt;span class="n"&gt;模块代码所在路径&lt;/span&gt;)
&lt;span class="nb"&gt;run&lt;/span&gt; [&lt;span class="n"&gt;module-name&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中为&lt;strong&gt;pach-to-your-module-dir&lt;/strong&gt;存放编写的模块的目录的路径。&lt;/p&gt;
&lt;h5&gt;0x04    动手写一些模块&lt;/h5&gt;
&lt;p&gt;&lt;a href="https://github.com/mwrlabs/drozer/wiki/Writing-a-Module#metadata"&gt;官方文档&lt;/a&gt;里说明了需要书写的一些属性：&lt;/p&gt;
&lt;p&gt;name、description、examples、author、date、license、path&lt;/p&gt;
&lt;p&gt;如果增加参数可使用&lt;strong&gt;add_arguments()&lt;/strong&gt;方法，其利用&lt;strong&gt;argparse&lt;/strong&gt;的原理。&lt;/p&gt;
&lt;p&gt;模块一：&lt;/p&gt;
&lt;p&gt;枚举所有的可导出的activity、content provider、service、broadcast receiver：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;drozer.modules&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PackageManager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Get App Info&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;examples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Dubu qingfeng&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2016-06-06&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;license&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;BSD (3-clause)&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;com.mwr.dz.permissions.GET_CONTEXT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--package&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The Package Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packageManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPackages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PackageManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET_ACTIVITIES&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Package: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packageName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_activities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_services&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_receivers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_providers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packageManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPackageInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PackageManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET_ACTIVITIES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Package: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packageName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_activities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_services&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_receivers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get_providers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_providers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;exported_providers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exported&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exported_providers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;exported_providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;authority&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authority&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__print_provider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; No exported providers.&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__print_provider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;Authority: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;  Read Permission: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readPermission&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;  Write Permission: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writePermission&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;  Content Provider: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;  Multiprocess Allowed: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;multiprocess&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;  Grant Uri Permissions: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grantUriPermissions&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uriPermissionPatterns&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;  Uri Permission Patterns:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uriPermissionPatterns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;    Path: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPath&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;      Type: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PatternMatcherTypes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;())]))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pathPermissions&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;  Path Permissions:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;permission&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pathPermissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;    Path: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permission&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPath&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;      Type: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PatternMatcherTypes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permission&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;())]))&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;      Read Permission: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permission&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getReadPermission&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;      Write Permission: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permission&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getWritePermission&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_receivers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;exported_receivers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;receivers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exported&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exported_receivers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;exported_receivers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__print_receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; No exported receivers.&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__print_receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;  Permission: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permission&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_services&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;exported_services&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;exported&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exported_services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;exported_services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__print_service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; No exported services.&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__print_service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;  Permission: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permission&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_activities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;exported_activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exported&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exported_activities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;exported_activities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__print_activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;    &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; No exported activities.&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__print_activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_has_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;parentActivityName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parentActivityName&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;  Parent Activity: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parentActivityName&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;  Permission: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permission&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;targetActivity&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;  Target Activity: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;targetActivity&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在模块一的基础上实现自动启动可导出的activity，以测试是否产生拒绝式服务。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;intent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;new&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;android.content.Intent&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;comp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;packageName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;com&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;new&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;android.content.ComponentName&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setComponent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setFlags&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x10000000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getContext&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%s need some premission.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x05    drozer module&lt;/h5&gt;
&lt;p&gt;QA:
1.drozer模块存放在哪，从哪寻找那些模块？&lt;/p&gt;
&lt;p&gt;用户自定义的模块，在当前目录下面会生成如下图所示的结构，当删除这个目录后，模块也被删除。并且drozer会在模块目录，存在一个名为.drozer_repository的文件。&lt;/p&gt;
&lt;p&gt;并且drozer的文件中说明了寻找模块的方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__locate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;    Search the module paths for Python modules, which may contain drozer&lt;/span&gt;
&lt;span class="s"&gt;    Modules, and build a collection of Python modules to load.&lt;/span&gt;
&lt;span class="s"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__paths&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dirpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_dirnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;module_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirpath&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.pyc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.pyo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;module_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__module_paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;drozer.modules.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;module&lt;/span&gt;
                    &lt;span class="nn"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;module&lt;/span&gt;

    &lt;span class="nn"&gt;return&lt;/span&gt; &lt;span class="n"&gt;modules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x06    自动化测试脚本思考&lt;/h5&gt;
&lt;p&gt;主要就是爬虫下载apk，然后自动安装apk，然后drozer去分析利用。&lt;/p&gt;
&lt;p&gt;爬虫下载apk的思路，曾经利用scrapy去下载一些apk网站上的排行apk。托管在了&lt;a href="https://coding.net/u/1433res/p/appchina-crawl/git"&gt;Coding&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如何自动安装apk呢？利用&lt;strong&gt;adb install -r xxx.apk&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;所以是爬虫下载apk，然后分开不同的目录，再利用脚本adb安装到设备上，并将包名输出到一个文件里，然后模块里在读取文件，然后进行检查package，或者拒绝服务的检测。&lt;/p&gt;
&lt;h5&gt;0x07    后记&lt;/h5&gt;
&lt;p&gt;drozer是利用protobuf协议作为通信的，如果这个协议出现了问题，又会怎么样呢？这是以后思考的方向吧。&lt;/p&gt;
&lt;p&gt;当然drozer的可利用范围是比较广的，可以测试SQL注入，以及各种组件的漏洞，或者配合nc进行shell的获取。以后再整理一些利用思路，或者一些exploit的编写。&lt;/p&gt;
&lt;h5&gt;0x08    参考链接&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://appscan.360.cn/blog/?p=45"&gt;自己动手开发Drozer插件之AutoAttack&lt;/a&gt;&lt;/p&gt;</summary><category term="Android安全"></category><category term="drozer"></category></entry><entry><title>XSS Filter</title><link href="dubuqingfeng.github.io/posts/2016/%205/23/201605-xss-filter/index.html" rel="alternate"></link><updated>2016-05-24T22:34:00+02:00</updated><author><name>admin</name></author><id>tag:,2016-05-23:dubuqingfeng.github.io/posts/2016/ 5/23/201605-xss-filter/index.html</id><summary type="html">&lt;h5&gt;0x01  前言及TOC&lt;/h5&gt;
&lt;p&gt;最近在看XSS的相关内容，也有很多需要注意的东西。在平时的开发及设计当中，不可避免的会遇到XSS，于是就有了设计一些filter的想法，以前也在phithon的github上看到过Python的&lt;a href="https://github.com/phith0n/python-xss-filter"&gt;XSS filter&lt;/a&gt;，毕竟自己动手实现一个对于理解XSS，以及过滤的相关事情是很有帮助的。因此设计一些简单的filter，以备自己使用，并且这些filter是不安全的，不要放在生产环境，毕竟没有经过一些专业的检测，以及自己的JavaScript和XSS水平有待提高。以及以后可能还会写一些如何attack 这个filter的文章。&lt;/p&gt;
&lt;p&gt;TOC：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基础的filter&lt;/p&gt;
&lt;p&gt;Python filter设计&lt;/p&gt;
&lt;p&gt;Java filter设计&lt;/p&gt;
&lt;p&gt;PHP filter设计&lt;/p&gt;
&lt;p&gt;系统层面filter&lt;/p&gt;
&lt;p&gt;后记&lt;/p&gt;
&lt;p&gt;相关paper&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;0x02  基础的filter&lt;/h5&gt;
&lt;p&gt;首先需要过滤&amp;lt;&amp;gt;"()/script等字符("&amp;gt;_&amp;lt;script123")，在PHP里可以使用preg_replace函数去过滤，并且通过htmlspecialchars函数转换为HTML实体编码。即：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;function safe_replace($content){
    $tags = array(
        &amp;quot;&amp;#39;&lt;span class="nt"&gt;&amp;lt;iframe&lt;/span&gt;&lt;span class="err"&gt;[^&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;]*?&amp;gt;.*?&lt;span class="nt"&gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;&amp;#39;is&amp;quot;,
        &amp;quot;&amp;#39;&lt;span class="nt"&gt;&amp;lt;frame&lt;/span&gt;&lt;span class="err"&gt;[^&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;]*?&amp;gt;.*?&lt;span class="nt"&gt;&amp;lt;/frame&amp;gt;&lt;/span&gt;&amp;#39;is&amp;quot;,
        &amp;quot;&amp;#39;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt;&lt;span class="err"&gt;[^&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;]*?&amp;gt;.*?&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&amp;#39;is&amp;quot;,
        &amp;quot;&amp;#39;&lt;span class="nt"&gt;&amp;lt;head&lt;/span&gt;&lt;span class="err"&gt;[^&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;]*?&amp;gt;.*?&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&amp;#39;is&amp;quot;,
        &amp;quot;&amp;#39;&lt;span class="nt"&gt;&amp;lt;title&lt;/span&gt;&lt;span class="err"&gt;[^&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;]*?&amp;gt;.*?&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;&amp;#39;is&amp;quot;,
        &amp;quot;&amp;#39;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt;&lt;span class="err"&gt;[^&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;]*?&amp;gt;&amp;#39;is&amp;quot;,
        &amp;quot;&amp;#39;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;&lt;span class="err"&gt;[^&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;]*?&amp;gt;&amp;#39;is&amp;quot;,
    );
    return preg_replace($tags, &amp;quot;&amp;quot;, $content);
}
echo htmlspecialchars(safe_replace($content));
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里可以采用&lt;a href="https://github.com/zicai/xss-learn/"&gt;zicai的XSS-learn代码&lt;/a&gt;进行实验。&lt;/p&gt;
&lt;p&gt;java可以使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.lang.StringEscapeUtils&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;StringEscapeUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escapeHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;script&amp;gt;alert(&amp;#39;xss&amp;#39;)&amp;lt;/script&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;如果引用&lt;/span&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="err"&gt;框架&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.web.util.HtmlUtils&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;HtmlUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htmlEscape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当有了过滤以后，测试&amp;lt;&amp;gt;"(号时，发现&amp;lt;&amp;gt;被转义成&lt;code&gt;&amp;amp;lt;&lt;/code&gt;和&lt;code&gt;&amp;amp;gt;&lt;/code&gt;，而"(等的并没有转义，当时怀疑是被实体编码了。当看到实际代码时，发现是字符串正则替换，后来一想，如果是类似于httpspecialchars那种的实体编码的话，引号也应该转义才对。当时还想着怎么绕过实体编码转义，于是又有了一个问题，关于java里的escapeHtml的底层实现是怎样的？以及实体编码是怎样的过程，似乎这个有点偏离主题了，这个完了再思考去写一篇总结编码的文章。&lt;/p&gt;
&lt;p&gt;而在Python里可以使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cgi&lt;/span&gt;
&lt;span class="n"&gt;cgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上都是一些正则过滤和escape编码的手段，当然不会过滤掉所有的XSS，仅可以防御一些小白。&lt;/p&gt;
&lt;p&gt;还是会有人去寻找其他的可控点，或者想办法去绕过过滤。&lt;/p&gt;
&lt;p&gt;当然这可以过滤&lt;strong&gt;';alert(String.fromCharCode(88,83,83))&lt;/strong&gt;这种的攻击向量么，如果可控点在JavaScript代码里呢，或者javascript伪协议，例如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;javascript:alert(&amp;#39;xss&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以及如果使用黑名单去过滤javascript伪协议的XSS，可以使用一些空格或者回车Tab等的绕过。即：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;img src=&amp;quot;javas
cript:
alert(/xss/)&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如何去过滤这种的呢？&lt;/p&gt;
&lt;p&gt;将换行符换成\n，将回车符换成\r，将制表符换成\t，空格可以遍历去除。&lt;/p&gt;
&lt;p&gt;当过滤完这种的以后呢，又会出现一些大小写混淆或者十进制十六进制编码或者注释的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;JavaScRiPt:alert(&amp;#39;xss&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jav&amp;amp;#97;ascript:alert(&amp;#39;xss);&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jav&amp;amp;#x09;ascript:alert(&amp;#39;xss);&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jav/**/ascript:alert(&amp;#39;xss&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;面对这些，如果过滤&lt;code&gt;/*&amp;amp;#javascript\;&lt;/code&gt;，不如采取一些白名单的形式，仅允许执行特定形式的，去正则匹配结果。例如：仅允许&lt;code&gt;&amp;lt;img src="http://"&amp;gt;&lt;/code&gt;这种的。&lt;/p&gt;
&lt;p&gt;可以构造正则语句："/^((http|ftp|https):\/\/)?[\w-&lt;em&gt;.]+(\/[\w-&lt;/em&gt;]+)*\/?$/"&lt;/p&gt;
&lt;p&gt;如果单纯地过滤一些常见的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签或者&lt;code&gt;onerror、onResume&lt;/code&gt;等事件，还是可能会利用&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;引入一个内容为如下的CSS进行hack。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;javascript:alert(&amp;quot;XSS&amp;quot;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然还是要记得去判断变量类型，数字型的直接判断是否是数字，字符型的限定一些长度，并且不能有特殊字符，还有不能有&lt;a href="http://hx99.net/Article/Tech/201409/36125.html"&gt;拆分跨站法(疯狂的跨站之行)&lt;/a&gt;的出现。&lt;/p&gt;
&lt;p&gt;如果一直针对绕过的方法，去不断过滤，未免有点麻烦，应该设计一个统一的filter，加强防御。&lt;/p&gt;
&lt;h5&gt;0x03  Python filter设计&lt;/h5&gt;
&lt;p&gt;一些用户的输入都是不可信的。&lt;/p&gt;
&lt;p&gt;基础的过滤就得使用一些函数或者开源库:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;//基础的过滤
escape(text, quote=True).replace(&amp;#39;:&amp;#39;,&amp;#39;&amp;amp;#58;&amp;#39;)
//以及一个富文本过滤类
lxml.html.clean.Cleaner.clean_html(html)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;富文本过滤类的一种思路：&lt;/p&gt;
&lt;p&gt;1.解析HTML节点&lt;/p&gt;
&lt;p&gt;2.过滤白名单标签，删除不在白名单的标签，并且判断属性及属性值。&lt;/p&gt;
&lt;p&gt;以及一些框架的处理策略：&lt;/p&gt;
&lt;p&gt;tornado：&lt;/p&gt;
&lt;p&gt;Tornado框架原则上所有输出在模板里的变量都会经过"HTML实体化"，并且官方文档也给出了&lt;a href="http://wonko.com/post/html-escaping"&gt;一篇文章的链接&lt;/a&gt;，说明了仅过滤&amp;amp;, &amp;lt;, &amp;gt;, ", 和 ' 这些字符是不够的。&lt;/p&gt;
&lt;p&gt;tornado都会自动执行xhtml_escape方法，将&amp;lt;, &amp;gt;, ", ', 和&amp;amp;进行了转义。&lt;/p&gt;
&lt;p&gt;但是也需要针对特殊情况去过滤，关注一些输出在JavaScript代码的地方，进行特定形式的转义、正则匹配。&lt;/p&gt;
&lt;h5&gt;0x04  PHP filter设计&lt;/h5&gt;
&lt;p&gt;《XSS跨站脚本与防御》的第242页给出了一个通用的过滤XSS的函数，贴到了&lt;a href="https://gist.github.com/dubuqingfeng/019414ea26ddba6257c089c26ed3852c"&gt;gist&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;PHP在处理&lt;code&gt;$_GET&lt;/code&gt;、&lt;code&gt;$_POST&lt;/code&gt;、&lt;code&gt;$_REQUEST&lt;/code&gt;等变量时需过滤一次。&lt;/p&gt;
&lt;p&gt;需要使用一些filter_var()，filter_input()函数来进行构造一些规则，进行一些模式的匹配，过滤。&lt;/p&gt;
&lt;p&gt;网上的一个防止基本的XSS函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;function transform_HTML(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt;, &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;length&lt;/span&gt;&lt;span class="x"&gt; = null) &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    // Helps prevent XSS attacks&lt;/span&gt;
&lt;span class="x"&gt;    // Remove dead space.&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt; = trim(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt;);&lt;/span&gt;
&lt;span class="x"&gt;    // Prevent potential Unicode codec problems.&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt; = utf8_decode(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt;);&lt;/span&gt;
&lt;span class="x"&gt;    // HTMLize HTML-specific characters.&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt; = htmlentities(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt;, ENT_NOQUOTES);&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt; = str_replace(&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;, &amp;quot;&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;35;&amp;quot;, &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt;);&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt; = str_replace(&amp;quot;%&amp;quot;, &amp;quot;&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;37;&amp;quot;, &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt;);&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;length&lt;/span&gt;&lt;span class="x"&gt; = intval(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;length&lt;/span&gt;&lt;span class="x"&gt;);&lt;/span&gt;
&lt;span class="x"&gt;    if (&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;length&lt;/span&gt;&lt;span class="x"&gt; &amp;gt; 0) &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt; = substr(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt;, 0, &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;length&lt;/span&gt;&lt;span class="x"&gt;);&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;    return &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从代码可以看到，期间过滤的一些空格，Unicode转码的问题，一些十进制十六进制的编码，并且限定了长度，进行了HTML实体编码，针对基础的XSS问题足够了。可以设计一个函数，获取GET、POST、REQUEST参数的时候，可以进行XSS的防护。&lt;/p&gt;
&lt;p&gt;以及可以使用一些类似于HTML Purifier，或者一些富文本过滤类。&lt;/p&gt;
&lt;h5&gt;0x05  Java filter设计&lt;/h5&gt;
&lt;p&gt;Java Web方面，通过过滤一些Request请求，在GET或者POST请求层面进行过滤。&lt;/p&gt;
&lt;p&gt;Java里面本来就有一个Filter类，继承这个Filter类，然后可以通过构造一个XSSRequestWrapper，过滤一些HttpServletRequest，配置好Web.xml，使这个继承后的Filter类全局有效，进行自动的anti一些xss，过滤掉所有请求里的恶意脚本。&lt;/p&gt;
&lt;p&gt;在XSSRequestWrapper这个类里，需要重写一些getParameterValues(), getParameter() 和 getHeader()方法，期间实现一些过滤xss的函数，通过一些HTML实体编码的手段，以及正则匹配替换掉一些关键词，或者直接replaceAll去替换。&lt;/p&gt;
&lt;p&gt;Web.xml的配置方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- XSS过滤器  --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;XSSFilter&lt;span class="nt"&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;
com.sxau.filter.XssFilter
&lt;span class="nt"&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;XSSFilter&lt;span class="nt"&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class="nt"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以使用一些类似于&lt;a href="https://github.com/naver/lucy-xss-filter"&gt;Lucy-XSS : XssFilter, XssPreventer&lt;/a&gt;的模块去处理。&lt;/p&gt;
&lt;h5&gt;0x06  系统层面filter&lt;/h5&gt;
&lt;p&gt;这里的系统层面，侧重于WAF方面。&lt;/p&gt;
&lt;p&gt;WAF可以是硬件层面，也可以是软件层面，&lt;a href="https://github.com/loveshell/ngx_lua_waf"&gt;ngx_lua_waf&lt;/a&gt;就提供了一种基于nginx_lua的思路。&lt;/p&gt;
&lt;p&gt;通常会定义一些过滤规则，就像下面这样的正则匹配规则：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;\.\./&lt;/span&gt;
&lt;span class="x"&gt;\:\&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;\&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;\&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;\&amp;lt;(iframe|script|body|img|layer|div|meta|style|base|object|input)&lt;/span&gt;
&lt;span class="x"&gt;(onmouseover|onerror|onload)\=&lt;/span&gt;
&lt;span class="x"&gt;(gopher|doc|php|glob|file|phar|zlib|ftp|ldap|dict|ogg|data)\:\/&lt;/span&gt;
&lt;span class="x"&gt;java\.lang&lt;/span&gt;
&lt;span class="x"&gt;\&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;GET|post|cookie|files|session|env|phplib|GLOBALS|SERVER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;\[&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然有些WAF还是联网获取这些规则的，它们采用的一些正则表达式匹配的方法，比较容易被绕过的，也有人提出了&lt;a href="http://www.edu.cn/web_9955/20100609/t20100609_484473.shtml"&gt;主动防御&lt;/a&gt;的概念。&lt;/p&gt;
&lt;h5&gt;0x07  后记&lt;/h5&gt;
&lt;p&gt;当学习地渐渐深入的时候，会越来越发现其的神奇，不断的过滤，不断的绕过，以及还有二哥和长短短的一些猥琐的思路，并且也有很多人教导学习XSS时候，一定要注意JavaScript基础，毕竟好的一名跨站师，xsser都是JavaScript很厉害。&lt;/p&gt;
&lt;p&gt;当然防御XSS，不只有建立filter，也需要一些HttpOnly，Noscript，WAF，CSP的配合，更需要加强安全意识。&lt;/p&gt;
&lt;p&gt;以后探索的方向：&lt;/p&gt;
&lt;p&gt;自动化挖掘XSS漏洞，自动化防御，CVE里的XSS，以及总结一些好的XSS思路，新型XSS，自动化利用框架，浏览器Filter策略，防御XSS，机器学习等。。。&lt;/p&gt;
&lt;h5&gt;0x08  相关paper及资料&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;给开发者的终极XSS备忘录&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/phith0n/python-xss-filter"&gt;python-xss-filter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;site:freebuf.com xss&lt;/p&gt;
&lt;p&gt;&lt;a href="http://drops.wooyun.org/?s=xss&amp;amp;submit=%E6%90%9C%E7%B4%A2"&gt;Wooyun Drops&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://code.google.com/p/owasp-esapi-python/"&gt;owasp-esapi-python&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Web安全"></category><category term="xss"></category></entry><entry><title>一些软件源的收集</title><link href="dubuqingfeng.github.io/posts/2016/%203/12/201603-some-sources/index.html" rel="alternate"></link><updated>2016-03-12T20:42:00+01:00</updated><author><name>admin</name></author><id>tag:,2016-03-12:dubuqingfeng.github.io/posts/2016/ 3/12/201603-some-sources/index.html</id><summary type="html">&lt;h5&gt;0x01 前言&lt;/h5&gt;
&lt;p&gt;在国内的大环境下，一些软件使用官方源会有很大的延迟，而使用国内搭建的同步官方源的话，速度会提升很多的，因此，本文总结一些常用的软件源，并不定期更新。&lt;/p&gt;
&lt;h5&gt;0x02 Linux&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mirrors.tuna.tsinghua.edu.cn/"&gt;清华源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mirrors.ustc.edu.cn/"&gt;中科大&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.aliyun.com/"&gt;阿里云&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://free.nchc.org.tw/pmwiki/index.php?n=FSLab.MirrorLists"&gt;自由軟體實驗室&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mirrors.cqu.edu.cn/"&gt;重庆大学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.zju.edu.cn/"&gt;浙大镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.opencas.cn/"&gt;中科院&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.163.com/"&gt;网易&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.sohu.com/"&gt;搜狐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirror.bit.edu.cn/web/"&gt;北京理工大学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirror.bjtu.edu.cn/cn/"&gt;北京交通大学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.xmu.edu.cn/"&gt;厦门大学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.hust.edu.cn/"&gt;华中科技大学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.linuxstory.org/"&gt;Linuxstory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.yun-idc.com/"&gt;首都在线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ftp.sjtu.edu.cn/"&gt;上海交通大学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirror.lzu.edu.cn/"&gt;兰州大学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://run.hit.edu.cn/html/"&gt;哈尔滨工业大学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.jlu.edu.cn/"&gt;吉林大学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mirrors.duohuo.org/"&gt;南信大多火工作室&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.jstvu.edu.cn/"&gt;江苏开放大学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8"&gt;Ubuntu官方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.deepin.org/mirror.html"&gt;Deepin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/"&gt;archlinux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以ubuntu为例，需要编辑&lt;strong&gt;/etc/apt/sources.list&lt;/strong&gt;文件&lt;/p&gt;
&lt;h5&gt;0x03 Docker&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker/"&gt;清华源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://get.daocloud.io/"&gt;Daocloud获取Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.alauda.cn/"&gt;灵雀云&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tenxcloud.com/"&gt;时速云&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;0x04 Android&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.androiddevtools.cn/"&gt;AndroidDevTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.opencas.cn/"&gt;中科院&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;0x05 Ruby (gem,bundle)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ruby.taobao.org/"&gt;淘宝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ruby.sdutlinux.org/"&gt;山东理工大学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/
$ gem sources -l
*** CURRENT SOURCES ***
https://ruby.taobao.org
&lt;span class="c1"&gt;# 请确保只有 ruby.taobao.org&lt;/span&gt;
$ gem install rails
*** bundle ***
可以用 Bundler 的 Gem 源代码镜像命令:
$ bundle config mirror.https://rubygems.org https://ruby.taobao.org
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x06 composer&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pkg.phpcomposer.com/"&gt;Packagist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;例1：修改 composer 的全局配置文件（推荐方式）

打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：

composer config -g repo.packagist composer 
https://packagist.phpcomposer.com

例2：修改当前项目的 composer.json 配置文件：

打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录
（也就是 composer.json 文件所在目录），执行如下命令：

composer config repo.packagist composer https://packagist.phpcomposer.com
上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息
（你也可以自己手工添加）：

&amp;quot;repositories&amp;quot;: {
&amp;quot;packagist&amp;quot;: {
&amp;quot;type&amp;quot;: &amp;quot;composer&amp;quot;,
&amp;quot;url&amp;quot;: &amp;quot;https://packagist.phpcomposer.com&amp;quot;
}
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x07 NodeJs npm&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://npm.taobao.org/"&gt;淘宝源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cnpmjs.org/"&gt;cnpm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;可以使用我们定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:&lt;/span&gt;

&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt; npm install -g cnpm --registry=https://registry.npm.taobao.org&lt;/span&gt;

&lt;span class="x"&gt;或者直接通过添加 npm 参数 alias 一个新命令:&lt;/span&gt;

&lt;span class="x"&gt;alias cnpm=&amp;quot;npm --registry=https://registry.npm.taobao.org \&lt;/span&gt;
&lt;span class="x"&gt;--cache=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.npm/.cache/cnpm \&lt;/span&gt;
&lt;span class="x"&gt;--disturl=https://npm.taobao.org/dist \&lt;/span&gt;
&lt;span class="x"&gt;--userconfig=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.cnpmrc&amp;quot;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; Or alias it in .bashrc or .zshrc&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt; echo &amp;#39;\n&lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;alias&lt;/span&gt;&lt;span class="x"&gt; for cnpm\nalias cnpm=&amp;quot;npm --registry=https://registry.npm.taobao.org \&lt;/span&gt;
&lt;span class="x"&gt;--cache=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.npm/.cache/cnpm \&lt;/span&gt;
&lt;span class="x"&gt;--disturl=https://npm.taobao.org/dist \&lt;/span&gt;
&lt;span class="x"&gt;--userconfig=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.cnpmrc&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc &amp;amp;&amp;amp; source ~/.zshrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;安装模块：
$ cnpm install [name]
同步模块：
$ cnpm sync connect
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x08 Python pip&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.mirrors.ustc.edu.cn/"&gt;中科大&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pypi.douban.com/"&gt;豆瓣&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="软件源"></category><category term="Linux"></category><category term="Docker"></category></entry><entry><title>Bugtags使用感触</title><link href="dubuqingfeng.github.io/posts/2015/12/18/201512-bugtags-feedback/index.html" rel="alternate"></link><updated>2015-12-19T01:34:00+01:00</updated><author><name>admin</name></author><id>tag:,2015-12-18:dubuqingfeng.github.io/posts/2015/12/18/201512-bugtags-feedback/index.html</id><summary type="html">&lt;h5&gt;0x01   前言、&lt;/h5&gt;
&lt;p&gt;写在Bugtags上线Crash发生趋势之际，以及英语四级前夜。仅感触，无其他。&lt;/p&gt;
&lt;h5&gt;0x02   起缘、&lt;/h5&gt;
&lt;p&gt;在9月份的时候，开学之际，随着Codekk微信号推送了一条名为“移动应用Bug快速反馈利器”的消息，工欲善其事，必先利其器。看完介绍了以后，不禁感觉眼前一亮，和以前接触的crash收集工具有点不一样，并且也听说过一些摇一摇进行反馈的功能。&lt;/p&gt;
&lt;p&gt;这个主要是一个类似于外包的项目，应用内容是大学内app社交、社区等形式，其中整体APP需要一个良好的架构，以及完善的测试（然而并没有测试），只好在边开发边测试。&lt;/p&gt;
&lt;p&gt;最初我们在应用开发上，采用的git版本控制，主要两个人进行开发，并没有测试妹纸。（最初找了一个“设计师”同学），在经理提出项目需求和改进时，往往通过经理去告诉给另外一个人，然后另一个人进行评估，直接在代码里进行修改，并且没有记录，整个过程并不透明。后来经理会找张纸记录一些问题，解决了打个对勾，但是这还是不好管理，并且对于机型的不确定性，以及Bug的难复现，降低了一些效率。&lt;/p&gt;
&lt;p&gt;此处应该有图片：&lt;/p&gt;
&lt;p&gt;&lt;img class="responsive-img" src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201512-bugtags-feedback-01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;在公众号信息里，展示了提交Bug的流程，然后试着集成了一下sdk，整体集成的过程并不麻烦，很快感受到了效果，并推荐给了另一位开发。&lt;/p&gt;
&lt;p&gt;在接入以后，熟悉了提交Bug的方式，感觉相见恨晚，很适合经理在提哪有问题，哪需要改进。&lt;/p&gt;
&lt;h5&gt;0x03   成长、&lt;/h5&gt;
&lt;p&gt;在接入应用以后，效率上感觉到了一些方便，但是就发现了一些问题，比如那会会一直邮件收到提醒，并提了工单，在QQ群里也进行了咨询，并且收到了这个问题正在解决中，会在下周上线。&lt;/p&gt;
&lt;p&gt;并且Bugtags提交Bug时，整体流程并不麻烦。&lt;/p&gt;
&lt;p&gt;令人感到欣慰的是，Bugtags团队的迭代，使得Bugtags不断的完善，随着使用中，逐渐上线了以下几个特性：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;增加几种标签状态和类型。&lt;/p&gt;
&lt;p&gt;区别了开发人员和提交Bug人员&lt;/p&gt;
&lt;p&gt;可以批量修改状态和删除标签&lt;/p&gt;
&lt;p&gt;Crash可以抓到截图&lt;/p&gt;
&lt;p&gt;支持了导出功能&lt;/p&gt;
&lt;p&gt;增加匿名提交&lt;/p&gt;
&lt;p&gt;添加了批量邀请成员等功能&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在团队的不断迭代开发应用的过程中，收到了很多经理的提的标签，经常一天提十几条，如果按照往常的列出清单，然后一个一个去解决，会浪费很多时间和效率。&lt;/p&gt;
&lt;p&gt;应用也在fir.im内测，不断的去完善，提高着自己的开发技能，奔溃影响机型数从最初的少量的几台手机在逐渐增加。&lt;/p&gt;
&lt;p&gt;此处应该有图片：&lt;/p&gt;
&lt;p&gt;&lt;img class="responsive-img" src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201512-bugtags-feedback-02.jpg"&gt;&lt;/p&gt;
&lt;h5&gt;0x04   伴随、&lt;/h5&gt;
&lt;p&gt;在使用的过程中，提交的问题越来越多，收到的标签也越来越多，毕竟是一个APP应用，从0.1到0.9的过程（0.1指接入时已经开发了一个简单原型）。&lt;/p&gt;
&lt;p&gt;一张现在的统计，标签已经不少了，此处继续应该有图片：&lt;/p&gt;
&lt;p&gt;&lt;img class="responsive-img" src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201512-bugtags-feedback-03.jpg"&gt;&lt;/p&gt;
&lt;p&gt;问题界面：&lt;/p&gt;
&lt;p&gt;&lt;img class="responsive-img" src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201512-bugtags-feedback-04.jpg"&gt;&lt;/p&gt;
&lt;p&gt;随着不断的使用，发觉提高了不少效率，在这将近三个月的相处之中，感受到了Bugtags团队的不懈努力，感受到了对开发与测试的关注。&lt;/p&gt;
&lt;p&gt;并且现在也提供了一些可视化的数据，来表达测试的效果，以及应用的完善程度。&lt;/p&gt;
&lt;p&gt;在上线以后，我们也重点关注了一些Crash，并且Crash相对于以前来说，更加好复现，并且对其进行了改进，优化应用的性能，提升了一些用户体验。&lt;/p&gt;
&lt;p&gt;因为机型和系统不同，作为一个android开发者，不可避免地会遇到很多Crash，当用户遇到了以后，作为开发也很无奈，毕竟比较难复现，有了Bugtags了以后，可以及时地统计机型，系统版本，以及用户所执行的步骤，现在最近又上线了Crash的发生趋势，可以让开发专注于近期发生频率高的Crash进行改进。&lt;/p&gt;
&lt;p&gt;此处应该有图片：&lt;/p&gt;
&lt;p&gt;&lt;img class="responsive-img" src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201512-bugtags-feedback-05.jpg"&gt;&lt;/p&gt;
&lt;p&gt;在今年的华北五省计算机应用大赛的答辩现场，也给评委们简单介绍了一下这个Bug管理平台，提高了一些开发效率。&lt;/p&gt;
&lt;h5&gt;0x05   后记、&lt;/h5&gt;
&lt;p&gt;你们的测试妹子、霸道产品、老板肯定需要它很久了，爱他恨他就转给他。&lt;/p&gt;
&lt;p&gt;在Bugtags之前，并不知道有相关的Bug管理平台，作为一名开发者，Bugtags是值得推荐的。&lt;/p&gt;
&lt;p&gt;最后提几点意见（其中有些不知道中肯与否）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开发android studio插件，实现可以收到紧急标签会提醒。&lt;/p&gt;
&lt;p&gt;开发android客户端，实现可以移动管理标签状态。&lt;/p&gt;
&lt;p&gt;开放一些api，实现自定义配置&lt;/p&gt;
&lt;p&gt;希望可以提供一些移动应用测试，例如monkey之类的实践。&lt;/p&gt;
&lt;p&gt;如果是非Wi-Fi环境下，提供一些流量方面的统计。&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Bug管理"></category><category term="Bugtags"></category></entry><entry><title>CNUTCon全球容器技术大会有感</title><link href="dubuqingfeng.github.io/posts/2015/%208/30/201508-CNUTCon-Docker-Beijing/index.html" rel="alternate"></link><updated>2015-08-30T20:23:00+02:00</updated><author><name>admin</name></author><id>tag:,2015-08-30:dubuqingfeng.github.io/posts/2015/ 8/30/201508-CNUTCon-Docker-Beijing/index.html</id><summary type="html">&lt;h5&gt;0x01 前言&lt;/h5&gt;
&lt;p&gt;作为容器技术的发展，自认为是互联网技术公司的基础设施架构的不可或缺的一部分，并且好多公司都在实践，并且创业公司也可以利用其加快开发，缩短构建部署等消耗的时间。&lt;/p&gt;
&lt;p&gt;很少有像docker这样才推出两年多就很火的样子，并且拿到了好多投资，😃，作为变化很快的IT行业，不掌握点新技术，很难在竞争中生存下来。&lt;/p&gt;
&lt;p&gt;并且Docker也适合进行弹性计算，毕竟一个容器启动是秒级别的，还可以作为持续集成等实践，统一开发和部署环境。(只需要一个Dockerfile或者yaml)&lt;/p&gt;
&lt;h5&gt;0x02 前沿&lt;/h5&gt;
&lt;p&gt;此次CNUTCon容器技术大会，聚集了像谷歌，百度，阿里，腾讯，360，京东等大公司，也不乏像Daocloud，灵雀云，时速云这类的创业公司。&lt;/p&gt;
&lt;p&gt;不仅有像谷歌，RedHat这类的公司分享Docker容器技术的演化，以及还有Daocloud给的一些实践。&lt;/p&gt;
&lt;p&gt;这些对于一些架构师，技术官，云平台工程师都是不容错过的，各大平台分享自己的平台演化之路，毕竟互联网公司需要的更多的是基础设施的稳定性，相互借鉴，互相交流。&lt;/p&gt;
&lt;h5&gt;0x03 前奏&lt;/h5&gt;
&lt;p&gt;晚上坐硬卧去北京，期间感受了硬卧的滋味，然后28号早上晚点了几十分钟到达了北京，然后乘地铁，倒到了十号线，在太阳宫，然后在周围找了半天，期间地图出现了些许问题，耽误了几十分钟，将近八点才到会场，然后在赞助商展演的地方刷了点小礼品。&lt;/p&gt;
&lt;h5&gt;0x04 开场&lt;/h5&gt;
&lt;p&gt;开场是由InfoQ官方的负责人员，郭蕾，霍泰稳(极客邦科技，InfoQ中国创始人兼CEO)，介绍了InfoQ的发展，与InfoQ和Docker的关系，毕竟整个大会大部分是在说docker及其相关，InfoQ很早的时候就推出了Docker专栏，并且推广过很多系列文章，以及还介绍了为什么举办此次会议。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201508-CNUTCon-Docker-Beijing-01.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;h5&gt;0x05 技术分享－28日上午&lt;/h5&gt;
&lt;p&gt;首先是RedHat公司的副总裁，一种印度味的英语根本听不懂，也只能拍拍Slides，去感受RedHat对于Docker发展的贡献了。其中的软件定义一切，让想起了软件定义网络，都是一些不知所云的名词，需要学习的太多太多。&lt;/p&gt;
&lt;p&gt;然后是CoreOS产品负责人，对于CoreOS的印象是版本号太奇葩，更新太快，会议第二天听了林帆的CoreOS实战以后，才有其他印象，想起来6月份，林帆还做过浏览器的镜像，一块还在灵雀云的发布会上见过。&lt;/p&gt;
&lt;p&gt;他讲了K8S，这又是较新的名词了，听说是谷歌出的，谷歌出的大部分都是好东西，并且感觉有技术含量，其他的还是回去看PPT吧。&lt;/p&gt;
&lt;p&gt;上午最后一个京东的分享容器之路，分享了一个秒杀的例子，秒杀在那几天的时候很消耗资源，但平时也用不着那么多资源，于是京东开始实践容器，并且说有10000+容器在线上运行，并且还在建设数据中心。&lt;/p&gt;
&lt;p&gt;并且也讲述了在网络和存储两大问题上的解决方案。&lt;/p&gt;
&lt;h5&gt;0x06 技术分享－28日下午&lt;/h5&gt;
&lt;p&gt;28日下午就去了解决方案专场，分会场，开始听灵雀云CTO陈恺分享微服务架构的演变，从单片到三层结构，再到最近的微服务架构，一个应用的架构在不断的发生演变，以电商网站作为例子，并且最后宣传了下灵雀云，作为持续交付，容器托管的创业公司。&lt;/p&gt;
&lt;p&gt;微服务作为近年流行的应用架构，重新定义了应用开发运维的方法。&lt;/p&gt;
&lt;p&gt;时速云王磊分享了k8s打造容器云平台实践，也是作为国内CAAS创业的一部分。&lt;/p&gt;
&lt;p&gt;华为梁辰晔分享了关于OCT容器开放测试项目的实践，是一套针对不同容器产品的统一测试框架，包含了容器标准测试、容器功能测试和容器性能测试。&lt;/p&gt;
&lt;p&gt;七牛的联合创始人徐立，曾经写过go语言编程还是什么的书，听得听的睡着了，中午吃完饭就没睡觉，『不要为了Docker而Docker、为了微服务而微服务』，毕竟Docker在网络和存储方面并不是长处。&lt;/p&gt;
&lt;p&gt;最后是SpeedyCloud，之前并没有听说过这个公司，在展台上打听的这是做云主机的一家公司，不过分享的大部分还是听不懂，回去慢慢啃PPT吧。&lt;/p&gt;
&lt;p&gt;并且在群里说TAE的分享不错，阿里的容器实践，回去看视频和ppt吧。&lt;/p&gt;
&lt;h5&gt;0x07 技术分享－29日上午&lt;/h5&gt;
&lt;p&gt;首先是首日期待很久了的谷歌Dawn Chen讲k8s和borg设计哲学，还是一名女讲师呢，她讲了在谷歌有20亿＋的容器在运行，并且早在很久以前(大概十年前开始)就已经实践了容器相关技术，并且将了k8s作为容器管理的发展，分享了Kubernetes的架构，设计等内容。&lt;/p&gt;
&lt;p&gt;相对来说，更对她的IT职场发展更感兴趣，作为一名女性，怎么在谷歌里成长的，这个完了可以作为例子，来激励或者鼓励自己罢。&lt;/p&gt;
&lt;p&gt;然后是华为的线超博讲swarm，swarm又是啥，毕竟没有接触过，作为swarm的Maintainer，并且也在分享里说了swarm并不适合直接作为生产环境，目前还在开发测试当中。&lt;/p&gt;
&lt;p&gt;最后是百度云平台负责人谢广军的分享百度云架构演化过程，从一开始的私有云实践到后来的公有云，开放云，如何支撑大量的资源进行调度。&lt;/p&gt;
&lt;h5&gt;0x08 技术分享－29日下午&lt;/h5&gt;
&lt;p&gt;中午遇到了几位灵雀云的工程师，并且在那讨论了关于灵雀云和容器docker的事，毕竟是作为开发者，总希望云平台对开发者便利，还有很多开发者对docker不了解或者是没听说过，记得灵雀云的用户群体是创业公司的，开发者还得有很多的学习docker的成本，并且在学习中还会遇到不少的坑，所以无论阿里云这类也好新浪云这类，又或是daocloud，灵雀云，时速云这种也罢，简化对于开发者上面的运维工作也很重要。&lt;/p&gt;
&lt;p&gt;下午的培训专场首先是林帆的CoreOS应用实战，从CoreOS讲到了Rkt，也说了Docker与CoreOS之间的关系，听了会出来吃茶点，然后又去主会场正好Daocloud进行分布式云平台微服务实践，如何快速部署一些服务，并且用Daocloud作为演示。&lt;/p&gt;
&lt;p&gt;最后是张磊的Kubernetes实战，作为浙大的科研人员，讲的感觉很深入浅出，并且也很有意思，值得分享。分享了关于集群管理的性能和利用率，如何进行大规模容器集群管理，以及Pod：容器化思维下的设计模式，k8s的原理。&lt;/p&gt;
&lt;h5&gt;0x09 后记&lt;/h5&gt;
&lt;p&gt;令人印象很深的是好几个讲师分享完了以后，都有好多人在其旁边去问问题也好，交流也罢，感觉气氛很好，在分会场也看到好多人在认真的做笔记，又或是拿着笔记本去实践，并且在浙大的张磊讲的时候还有好多人站的，第一天会议的时候也有很多人在后面站的。&lt;/p&gt;
&lt;p&gt;感觉有些讲师的分享干货不少，一下很难全消化掉。尤其是TAE的，谷歌的，张磊的令人印象深，TAE作为阿里的，分享阿里云在容器方面要做的一些事，并且看上去也很厉害，这些是创业公司不可比拟的额。&lt;/p&gt;
&lt;p&gt;张磊讲的深入浅出，(毕竟是受过高等教育的人,逃),并且其中也进行了答疑，作为浙大SEL实验室，并且也有新书要发售，Daocloud的孙宏亮也写了一本书《Docker源码分析》。&lt;/p&gt;
&lt;p&gt;传统的虚拟化技术，会在不知不觉中被容器技术替代，在互联网公司里首先会普及容器技术，然后逐渐往非互联网行业渗透，虽然觉得这个时间会很长很长，但是不可不知的是容器技术不仅在现在，在未来都会是重点发展的一部分。&lt;/p&gt;
&lt;h5&gt;0x10 附照及PPT视频链接&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://www.stuq.org/ppt/qcon2015/CNUTCon%E5%85%A8%E7%90%83%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E5%A4%A7%E4%BC%9A"&gt;PPT下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pan.baidu.com/s/1gd6OSXd"&gt;http://pan.baidu.com/s/1gd6OSXd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.infoq.com/cn/CNUTCon"&gt;在线视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201508-CNUTCon-Docker-Beijing-02.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201508-CNUTCon-Docker-Beijing-03.jpg" class="responsive-img"&gt;&lt;/p&gt;</summary><category term="CNUTCon"></category><category term="Docker"></category></entry><entry><title>如何使用PreferenceFragment方便地完成设置界面</title><link href="dubuqingfeng.github.io/posts/2015/%206/06/201506-android-Preference-fragment/index.html" rel="alternate"></link><updated>2015-06-06T12:13:00+02:00</updated><author><name>admin</name></author><id>tag:,2015-06-06:dubuqingfeng.github.io/posts/2015/ 6/06/201506-android-Preference-fragment/index.html</id><summary type="html">&lt;h5&gt;0x01 前言&lt;/h5&gt;
&lt;p&gt;在设置界面的开发时，以前往往通过自己写界面，在没有合适美工时，比较费时费力，尤其是以前需要兼容Android2.3的时候。当3.0以后出现了PreferenceFragment，可以快速地完成一个类似于系统设置的偏好设定界面。&lt;/p&gt;
&lt;p&gt;在android3.0以后，官方推荐使用PreferenceFragment去替代PreferenceActivity。
以及一些配置。&lt;/p&gt;
&lt;h5&gt;0x02 浅析&lt;/h5&gt;
&lt;p&gt;PreferenceFragment是继承于Fragment，实现了PreferenceManager.OnPreferenceTreeClickListener这些接口。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Interface definition for a callback to be invoked when a&lt;/span&gt;
&lt;span class="cm"&gt; * {@link Preference} in the hierarchy rooted at this &lt;/span&gt;
&lt;span class="cm"&gt; * {@link PreferenceScreen} is&lt;/span&gt;
&lt;span class="cm"&gt; * clicked.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * @hide&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
public&lt;span class="w"&gt; &lt;/span&gt;interface&lt;span class="w"&gt; &lt;/span&gt;OnPreferenceTreeClickListener&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Called when a preference in the tree rooted at this&lt;/span&gt;
&lt;span class="cm"&gt;     * {@link PreferenceScreen} has been clicked.&lt;/span&gt;
&lt;span class="cm"&gt;     * &lt;/span&gt;
&lt;span class="cm"&gt;     * @param preferenceScreen The {@link PreferenceScreen} that the&lt;/span&gt;
&lt;span class="cm"&gt;     *        preference is located in.&lt;/span&gt;
&lt;span class="cm"&gt;     * @param preference The preference that was clicked.&lt;/span&gt;
&lt;span class="cm"&gt;     * @return Whether the click was handled.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;boolean&lt;span class="w"&gt; &lt;/span&gt;onPreferenceTreeClick&lt;span class="o"&gt;(&lt;/span&gt;PreferenceScreen&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;preferenceScreen&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Preference&lt;span class="w"&gt; &lt;/span&gt;preference&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x03 完成步骤&lt;/h5&gt;
&lt;p&gt;通过新建项目的方式：&lt;/p&gt;
&lt;p&gt;在android-studio里，新建一个项目：PreferenceFragmentDemo&lt;/p&gt;
&lt;p&gt;选择Blank Activity With Fragment，填写activity为SettingActivity。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修改fragment继承PreferenceFragment。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新建一个xml文件，建立/res/xml/preferences.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;PreferenceScreen&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;PreferenceCategory&lt;/span&gt;
        &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;设置A&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;CheckBoxPreference&lt;/span&gt;
            &lt;span class="na"&gt;android:key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox_preference&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;标题&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:summary=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;详细&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/PreferenceCategory&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;PreferenceCategory&lt;/span&gt;
        &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;设置B&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;EditTextPreference&lt;/span&gt;
            &lt;span class="na"&gt;android:key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;edittext_preference&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;标题&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:summary=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;详细&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:dialogTitle=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;对话框标题&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/PreferenceCategory&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/PreferenceScreen&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在SettingFragment中，通过addPreferencesFromResource(R.xml.preferences);加载上述的xml文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    addPreferencesFromResource(R.xml.preferences);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置项保存到哪了？SharedPreferences。在/data/data/应用包名/shared_prefs/应用包名_preferences.xml文件中，android:key即为键值名。&lt;/p&gt;
&lt;p&gt;如何读取设置？通过SharedPreferences&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SharedPreferences mySharedPreferences = PreferenceManager
        .getDefaultSharedPreferences(this);

boolean my_checkbox_preference = mySharedPreferences.getBoolean(
        &amp;quot;checkbox_preference&amp;quot;, false);
prefCheckBox.setChecked(my_checkbox_preference);

String my_edittext_preference = mySharedPreferences.getString(
        &amp;quot;edittext_preference&amp;quot;, &amp;quot;&amp;quot;);
prefEditText.setText(my_edittext_preference);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;列表设置项的ListPreferences类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;ListPreference
      android:key=&amp;quot;list_preference&amp;quot;
      android:title=&amp;quot;@string/标题&amp;quot;
      android:dialogTitle=&amp;quot;@string/对话框标题&amp;quot;
      android:entries=&amp;quot;@array/listArray&amp;quot;
      android:entryValues=&amp;quot;@array/listValues&amp;quot; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;entries和entryValues从哪来？/res/values/array.xml或者/res/values/strings.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;string-array&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;listArray&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;Headings&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;Headings and Details&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;All Data&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/string-array&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;string-array&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;listValues&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/string-array&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;preference-headers类&lt;/p&gt;
&lt;h5&gt;0x04 Preference类&lt;/h5&gt;
&lt;p&gt;前几天在SIMS(学生信息管理系统)项目中，涉及到了Preference这个类，当时可以通过输入输出流进行与文件的交互。&lt;/p&gt;
&lt;p&gt;在Java里可以利用这个类进行一些配置信息的保存等。&lt;/p&gt;
&lt;p&gt;详情可参考&lt;a href="https://github.com/DigDream/SIMS/blob/master/src/com/student/sb/utils/PropertiesUtils.java"&gt;PropertiesUtils&lt;/a&gt;的实现。&lt;/p&gt;
&lt;h5&gt;0x05 思考&lt;/h5&gt;
&lt;p&gt;其PreferenceFragment文件源码地址在：&lt;a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/preference/PreferenceFragment.java"&gt;GoogleSource&lt;/a&gt;，其中利用了ListView进行界面绘制。另外grepcode.com这个网站是个不错的查看android源代码(AOSP)的网站。以及还有一些&lt;a href="http://www.programcreek.com/java-api-examples/index.php?api=android.preference.PreferenceFragment"&gt;示例代码&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;并且文档里还介绍了android3.0以前如果想用PreferenceFragment怎么办，详细参考&lt;a href="http://developer.android.com/guide/topics/ui/settings.html#BackCompatHeaders"&gt;这个链接&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href="源码分析"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;0x06 参考链接&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://developer.android.com/guide/topics/ui/settings.html"&gt;settings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://developer.android.com/reference/android/preference/PreferenceFragment.html"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cs.dartmouth.edu/~campbell/cs65/lecture12/lecture12.html"&gt;Using PreferenceFragment to store user preferences&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/codepath/android_guides/wiki/Settings-with-PreferenceFragment"&gt;Settings-with-PreferenceFragment&lt;/a&gt;&lt;/p&gt;</summary><category term="Android"></category><category term="PreferenceFragment"></category></entry><entry><title>Linux VPS的一些配置</title><link href="dubuqingfeng.github.io/posts/2015/%205/16/201505-vps-base-setting/index.html" rel="alternate"></link><updated>2015-05-16T12:53:00+02:00</updated><author><name>admin</name></author><id>tag:,2015-05-16:dubuqingfeng.github.io/posts/2015/ 5/16/201505-vps-base-setting/index.html</id><summary type="html">&lt;h5&gt;0x01 更改默认ssh登录端口&lt;/h5&gt;
&lt;p&gt;一般ssh是开放的，容易受到攻击或者爆破等行为。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#vi /etc/ssh/sshd_config

#Port 22             //先把22注释掉
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;Port 2754            //添加一个新的端口
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启ssh服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service sshd restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x02 使用密钥登录而不是密码&lt;/h5&gt;
&lt;p&gt;在一个自用的vps上，避免使用密码登录，妥善保管好密钥，可以提高一定的安全性。&lt;/p&gt;
&lt;p&gt;一开始使用Xshell的密钥生成工具，在工具选项卡中，有新建用户密钥生成向导，选择RSA，密钥长度为2048位，下一步输入私钥密码，涉及到了非对称加密，详细原理正在读《深入浅出密码学》，一些RSA算法，在256位密钥以上进行蛮力攻击时耗费时间较长。生成了pub格式的公钥。&lt;/p&gt;
&lt;p&gt;将我们生成的pub公钥文件上传到/root/.ssh文件夹下面（如果没有我们需要创建），然后我们需要将id_rsa_2048.pub重命名为authorized_keys 并且用chmod 600 authorized_keys设置权限。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chmod 600 /root/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;找到/etc/ssh/sshd_config ，把RSAAuthentication和PubkeyAuthentication两行前面的#注释去掉。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vi /etc/ssh/sshd_config
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启sshd服务的另一种方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Debian/Ubuntu执行：/etc/init.d/ssh restart

CentOS执行：/etc/init.d/sshd restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;禁止密码登录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vi /etc/ssh/sshd_config 文件

找到PasswordAuthentication后面的yes改成no。
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x03 查看登录日志&lt;/h5&gt;
&lt;p&gt;首先进入日志目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd /var/log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看ssh用户的登录日志：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;less secure
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看登录成功的ip信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;last
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看登录失败的ip信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;lastb
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x04 配置shadowsocks&lt;/h5&gt;
&lt;p&gt;安装setuptools&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum install -y python-setuptools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装完毕后，easy_install命令就可以使用了。&lt;/p&gt;
&lt;p&gt;安装pip，默认安装到/usr/bin目录下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;easy_install pip
pip install shadowsocks
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建shadowsocks的配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vi /etc/shadowsocks.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;内容如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
        &amp;quot;server&amp;quot;:&amp;quot;your_server_ip&amp;quot;,
        &amp;quot;server_port&amp;quot;:8989,
        &amp;quot;local_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
        &amp;quot;local_port&amp;quot;:1080,
        &amp;quot;password&amp;quot;:&amp;quot;yourpassword&amp;quot;,
        &amp;quot;timeout&amp;quot;:600,
        &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;,
        &amp;quot;fast_open&amp;quot;: false,
        &amp;quot;workers&amp;quot;: 1
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一些优化：&lt;/p&gt;
&lt;p&gt;安装 gevent可以提高 Shadowsocks的性能。CentOS下安装gevent依赖libevent和greenlet。&lt;/p&gt;
&lt;p&gt;安装libevent：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum install -y libevent
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装greenlet：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install greenlet
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装gevent：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install gevent
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行shadowsocks服务端：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssserver -c /etc/shadowsocks.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果想在后台一直运行Shadowsocks，启动命令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nohup ssserver -c /etc/shadowsocks.json &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;防火墙的设置&lt;/p&gt;
&lt;p&gt;编辑防火墙配置文件/etc/sysconfig/iptables，将服务器端口（server_port）放行。 新增一条防火墙规则：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-A INPUT -m state --state NEW -m tcp -p tcp --dport 8989 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启防火墙iptables：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service iptables restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用docker部署shadowsocks服务。&lt;/p&gt;
&lt;p&gt;1.安装并测试Docker，可以参考官方文档。或者是《Docker入门与实践》安装一节。&lt;/p&gt;
&lt;p&gt;2.拉取镜像&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;docker pull index.alauda.cn/dubuqingfeng/ubuntu-shadowsocks
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.运行容器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;docker run -d -p 1984:1984 index.alauda.cn/dubuqingfeng/ubuntu-shadowsocks -p 1984 -k sspassword -m aes-256-cfb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1984即为服务器端口。&lt;/p&gt;
&lt;p&gt;sspassword为连接密码，自行更换。&lt;/p&gt;
&lt;p&gt;aes-256-cfb为加密方式。&lt;/p&gt;
&lt;p&gt;也可以使用-c /etc/shadowsocks.json参数。&lt;/p&gt;
&lt;p&gt;4.测试运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;docker ps -a
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果出现up即为安装成功。&lt;/p&gt;
&lt;p&gt;Centos7版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;docker pull index.alauda.cn/dubuqingfeng/centos7-shadowsocks
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行容器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;docker run -d -p 1984:1984 index.alauda.cn/dubuqingfeng/centos7-shadowsocks -p 1984 -k sspassword -m aes-256-cfb
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x05 Koding环境配置pelican简记&lt;/h5&gt;
&lt;p&gt;Koding是一个在线IDE环境，适合进行Web方面的开发，支持Java、PHP、NodeJS、Perl、Python、Ruby、C、C++和Go等编程语言，貌似不太好绑定自定义域名。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python-pip
pip install pelican
sudo apt-get install python-virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x06 后记&lt;/h5&gt;
&lt;p&gt;需要进一步学习SSH协议，Linux服务器管理，密码学，sock5代理，iptables。&lt;/p&gt;
&lt;p&gt;路漫漫，盖余之勤且艰若此。&lt;/p&gt;
&lt;p&gt;专注地做好每一件事。&lt;/p&gt;</summary><category term="linux"></category><category term="vps"></category></entry><entry><title>Ubuntu sdk、ubuntu touch、QML、Ionic开发入坑记</title><link href="dubuqingfeng.github.io/posts/2015/%205/12/201505-ubuntutouch-ionic-qml/index.html" rel="alternate"></link><updated>2015-05-12T09:13:00+02:00</updated><author><name>admin</name></author><id>tag:,2015-05-12:dubuqingfeng.github.io/posts/2015/ 5/12/201505-ubuntutouch-ionic-qml/index.html</id><summary type="html">&lt;h5&gt;0x01 前言&lt;/h5&gt;
&lt;p&gt;人生就是一个不断挖坑、埋坑的过程，最近又接了一些活，参加一些比赛。并且尝试开发一些不同平台的应用。&lt;/p&gt;
&lt;h5&gt;0x02 ubuntu sdk&lt;/h5&gt;
&lt;p&gt;ubuntu sdk是基于QT Creator，自然开发起来主要是QT、qml，QT的基础仅是会调一些控件，了解信号槽机制，对于其他的SQL、串口通信没了解过，也没有做过完整的项目。其优势跨平台，然而QT在安卓上的发展并没有HTML5火，并且打包出来相对原生较大的感觉。为了响应敏捷开发，QT还有一个QT Quick，采用qml语言，其语法与javascript较为类似，qml代码如果有javascript和安卓开发基础就好理解。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get update &amp;amp;&amp;amp; apt-get dist-upgrade
apt-get install ubuntu-sdk
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x03 ubuntu touch&lt;/h5&gt;
&lt;p&gt;作为ubuntu在手机端的产品，据说魅族也要联合推出手机，相类似的有Firefox OS、Salish……，主要开发方式有QT原生、HTML5、Scope，应该也可以用go、python进行开发，鉴于HTML5开发手机应用的不成熟，尤其是这种非安卓、iOS的，能想到的也就是用phoneGap构建，相对来说，展示类应用，用HTML5开发效率高。&lt;/p&gt;
&lt;p&gt;相对Android来说，ubuntu touch感觉风格较统一，有便利的边缘交互模式，但是只靠这几点去赢得市场，在应用为王的移动互联网时代中比较难。一个用户，尤其是80后，90后，00后，系统上连微信、QQ都没有，比较难将其做为主力机。&lt;/p&gt;
&lt;p&gt;PS： 1.前几天应用市场上发布了Web QQ，使用了Web App进行开发的。&lt;/p&gt;
&lt;h5&gt;0x04 QML&lt;/h5&gt;
&lt;h5&gt;0x05 ionic&lt;/h5&gt;
&lt;p&gt;ionic的安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; $ npm install -g cordova ionic
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ionic in Action 一些AngularJS入门资料&lt;/p&gt;
&lt;p&gt;AngularJS入门教程&lt;/p&gt;
&lt;p&gt;AngularJS权威教程&lt;/p&gt;
&lt;p&gt;用AngularJS开发下一代Web应用&lt;/p&gt;
&lt;h5&gt;0x100 参考资料&lt;/h5&gt;
&lt;p&gt;AngularJS&lt;/p&gt;</summary><category term="ubuntu"></category><category term="sdk"></category><category term="ubuntu touch"></category><category term="qml"></category><category term="ionic"></category></entry><entry><title>基于arduino的解魔方机器人一些总结</title><link href="dubuqingfeng.github.io/posts/2015/%204/30/201504-Rubik's-Cube-Robot-yixiezongjie/index.html" rel="alternate"></link><updated>2015-07-28T21:41:00+02:00</updated><author><name>admin</name></author><id>tag:,2015-04-30:dubuqingfeng.github.io/posts/2015/ 4/30/201504-Rubik's-Cube-Robot-yixiezongjie/index.html</id><summary type="html">&lt;h5&gt;0x01 期间的一些问题&lt;/h5&gt;
&lt;p&gt;解魔方机器人，最初只是大一的一个想法，然后那会调研了下，成本需要两三k，并且是动力老男孩的那种版本，印象中其他类型的解魔方机器人需要的动手能力比较强。&lt;/p&gt;
&lt;p&gt;在毕昇杯想项目的过程中，本来有一个区域性物流定位的项目，但是相关基础是在不好，并没有相关思路，所以同时也在构思其他项目，在一次睡梦中，想到了解魔方机器人，想到了现在的原型，并且在寒假中开始搜集资料，整理思路。&lt;/p&gt;
&lt;p&gt;在刚开始的时候，遇到了一些问题。&lt;/p&gt;
&lt;p&gt;首先是材料选择的问题，因为并没有相关经验，也没有找到前人的经验，所以在底座和滑动的选择上，建立了好几个相关方案。&lt;/p&gt;
&lt;h5&gt;0x02 期间的一些收获&lt;/h5&gt;
&lt;p&gt;在期间，王总也在割板子的过程中受了几次伤；也好几次在晚上十一点熄灯以后进行一些业务和技术上的讨论。&lt;/p&gt;
&lt;h5&gt;0x03 无可置换的控制板&lt;/h5&gt;
&lt;h5&gt;0x04 博创杯参赛小记&lt;/h5&gt;
&lt;h5&gt;0x05 博创杯见闻&lt;/h5&gt;
&lt;h5&gt;0x06 嵌入式回顾&lt;/h5&gt;</summary><category term="电子设计"></category><category term="解魔方机器人"></category></entry><entry><title>基于arduino的解魔方机器人后续扩展</title><link href="dubuqingfeng.github.io/posts/2015/%204/20/201503-Rubik's-Cube-Robot-houxukuozhan/index.html" rel="alternate"></link><updated>2015-04-20T16:22:00+02:00</updated><author><name>admin</name></author><id>tag:,2015-04-20:dubuqingfeng.github.io/posts/2015/ 4/20/201503-Rubik's-Cube-Robot-houxukuozhan/index.html</id><summary type="html">&lt;h5&gt;0x01 Android软件上的扩展&lt;/h5&gt;
&lt;p&gt;Android上的控制软件，&lt;/p&gt;
&lt;h5&gt;0x02 Arduino主控的扩展&lt;/h5&gt;
&lt;h5&gt;0x03 在图像处理方面的扩展&lt;/h5&gt;
&lt;h5&gt;0x04 蓝牙WIFI方面的扩展&lt;/h5&gt;
&lt;h5&gt;0x05 主控板的扩展&lt;/h5&gt;
&lt;h5&gt;0x06 树莓派的扩展&lt;/h5&gt;</summary><category term="电子设计"></category><category term="解魔方机器人"></category></entry><entry><title>基于Arduino的解魔方机器人软件设计与实现</title><link href="dubuqingfeng.github.io/posts/2015/%204/10/201503-Rubik's-Cube-Robot-Ruanjiansheji/index.html" rel="alternate"></link><updated>2015-04-10T20:18:00+02:00</updated><author><name>admin</name></author><id>tag:,2015-04-10:dubuqingfeng.github.io/posts/2015/ 4/10/201503-Rubik's-Cube-Robot-Ruanjiansheji/index.html</id><summary type="html">&lt;h5&gt;0x01 Android上位机设计部分&lt;/h5&gt;
&lt;p&gt;常见的魔方比赛可以&lt;/p&gt;
&lt;h5&gt;0x02 Android代码思路&lt;/h5&gt;
&lt;h5&gt;0x03 Android软件测试&lt;/h5&gt;
&lt;h5&gt;0x04 Arduino测试代码思路&lt;/h5&gt;
&lt;p&gt;首先通过官方示例程序Knob和Sweep测试舵机运行情况&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* &lt;/span&gt;
&lt;span class="cm"&gt; Controlling a servo position using a potentiometer (variable resistor) &lt;/span&gt;
&lt;span class="cm"&gt; by Michal Rinott &amp;lt;http://people.interaction-ivrea.it/m.rinott&amp;gt;&lt;/span&gt;

&lt;span class="cm"&gt; modified on 8 Nov 2013&lt;/span&gt;
&lt;span class="cm"&gt; by Scott Fitzgerald&lt;/span&gt;
&lt;span class="cm"&gt; http://arduino.cc/en/Tutorial/Knob&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;Servo.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Servo&lt;/span&gt; &lt;span class="n"&gt;myservo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// create servo object to control a servo&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;potpin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// analog pin used to connect the potentiometer&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// variable to read the value from the analog pin&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;myservo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// attaches the servo on pin 9 to the servo object&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;analogRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;potpin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;            &lt;span class="c1"&gt;// reads the value of the potentiometer (value between 0 and 1023) &lt;/span&gt;
  &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1023&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// scale it to use it with the servo (value between 0 and 180) &lt;/span&gt;
  &lt;span class="n"&gt;myservo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                  &lt;span class="c1"&gt;// sets the servo position according to the scaled value &lt;/span&gt;
  &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                           &lt;span class="c1"&gt;// waits for the servo to get there &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* Sweep&lt;/span&gt;
&lt;span class="cm"&gt; by BARRAGAN &amp;lt;http://barraganstudio.com&amp;gt; &lt;/span&gt;
&lt;span class="cm"&gt; This example code is in the public domain.&lt;/span&gt;

&lt;span class="cm"&gt; modified 8 Nov 2013&lt;/span&gt;
&lt;span class="cm"&gt; by Scott Fitzgerald&lt;/span&gt;
&lt;span class="cm"&gt; http://arduino.cc/en/Tutorial/Sweep&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;Servo.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="n"&gt;Servo&lt;/span&gt; &lt;span class="n"&gt;myservo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// create servo object to control a servo &lt;/span&gt;
                &lt;span class="c1"&gt;// twelve servo objects can be created on most boards&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// variable to store the servo position &lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;myservo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// attaches the servo on pin 9 to the servo object &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// goes from 0 degrees to 180 degrees &lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;                                  &lt;span class="c1"&gt;// in steps of 1 degree &lt;/span&gt;
    &lt;span class="n"&gt;myservo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;              &lt;span class="c1"&gt;// tell servo to go to position in variable &amp;#39;pos&amp;#39; &lt;/span&gt;
    &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                       &lt;span class="c1"&gt;// waits 15ms for the servo to reach the position &lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;// goes from 180 degrees to 0 degrees &lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;myservo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;              &lt;span class="c1"&gt;// tell servo to go to position in variable &amp;#39;pos&amp;#39; &lt;/span&gt;
    &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                       &lt;span class="c1"&gt;// waits 15ms for the servo to reach the position &lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x05 Arduino代码&lt;/h5&gt;
&lt;p&gt;Arduino代码部分在github上也可找到，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用串口测试成对舵机的代码--&amp;gt;DoubleServo&lt;/p&gt;
&lt;p&gt;约定一些操作码和公式进行方便控制舵机的代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;0x05 计算解法公式&lt;/h5&gt;
&lt;p&gt;涉及到魔方解法部分，&lt;/p&gt;
&lt;h5&gt;0x06 蓝牙发送操作码&lt;/h5&gt;
&lt;p&gt;分为普通公式与特定操作码部分，普通公式主要为使用二阶段算法计算出来的解法公式，并且约定带+号为顺时针旋转，带-号为逆时针旋转，特定操作码约定一些特定的舵机控制操作，主要以下列表所示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全部还原固定角度&lt;/p&gt;
&lt;p&gt;成对舵机转动固定角度&lt;/p&gt;
&lt;p&gt;单个舵机转动固定角度&lt;/p&gt;
&lt;p&gt;从舵机进行转动，使机械臂进行前进与后退操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;0x07 魔方解法操作对应舵机动作分析&lt;/h5&gt;
&lt;p&gt;因为舵机转动角度为0～180度，所以在初始角度中有两种，可以在0度，使得可以一次性做U和U2类型的操作(关于魔方转法表示，参考详细思考)，魔方解法为上黄下白前橙的初始位置。&lt;/p&gt;
&lt;p&gt;R动作分析如下：2f号舵机旋转到90度，延迟等待旋转完毕，2b号舵机旋转，使机械臂后退，延迟等待旋转完毕，2f号舵机旋转到0度，延迟等待旋转完毕，2b号舵机旋转，使机械臂前进卡住魔方。&lt;/p&gt;</summary><category term="电子设计"></category><category term="解魔方机器人"></category></entry><entry><title>基于Arduino的解魔方机器人组装调试</title><link href="dubuqingfeng.github.io/posts/2015/%203/24/201503-Rubik's-Cube-Robot-Zhuzhuangtiaoshi/index.html" rel="alternate"></link><updated>2015-03-24T22:12:00+01:00</updated><author><name>admin</name></author><id>tag:,2015-03-24:dubuqingfeng.github.io/posts/2015/ 3/24/201503-Rubik's-Cube-Robot-Zhuzhuangtiaoshi/index.html</id><summary type="html">&lt;h5&gt;0x01 LM3S615&lt;/h5&gt;
&lt;p&gt;此板是属于TI公司LM3S系列，是ARM Cortex-M3内核，相关手册以及电路图、说明书也在&lt;a href="http://download"&gt;&lt;/a&gt;有下载，主要使用20针JTAG接口与J-LINK仿真器进行连接调试，主要有关系的是LM3S615的串口通信，PWM模块和GPIO接口。&lt;/p&gt;
&lt;h5&gt;0x02 TTL与RS-232&lt;/h5&gt;
&lt;p&gt;波特率&lt;/p&gt;
&lt;h5&gt;0x03 GPIO&lt;/h5&gt;
&lt;p&gt;第一次接触GPIO是在树莓派上，可以利用其进行一些输入或者输出的控制。&lt;/p&gt;
&lt;h5&gt;0x04 舵机控制板&lt;/h5&gt;
&lt;p&gt;采用的是普通Arduino24路舵机控制板V4.21，可以通过单片机、Arduino、蓝牙模块等控制舵机。详细说明在&lt;a href=""&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;舵机控制板如图所示，电源，中间可以使用蓝牙模块进行控制，预留了RXD、TXD、GND以及3.3V或5V&lt;/p&gt;
&lt;h5&gt;0x05 UART串口&lt;/h5&gt;
&lt;h5&gt;0x06 系统控制框图&lt;/h5&gt;
&lt;p&gt;因为甘特图markdown解析器可能不支持，系统控制框图如图所示。&lt;/p&gt;
&lt;h5&gt;0x06 整体结构设计&lt;/h5&gt;
&lt;h5&gt;0x07 机械手的设计&lt;/h5&gt;
&lt;p&gt;CAD截面图如图所示，使用亚克力板进行切割制作&lt;/p&gt;
&lt;h5&gt;0x08 主舵机导轨的设计&lt;/h5&gt;
&lt;h5&gt;0x09 从舵机的处理&lt;/h5&gt;
&lt;h5&gt;0x10 舵机控制板与舵机的测试&lt;/h5&gt;
&lt;p&gt;舵机控制板首先需要考虑电源供电的问题，因为舵机电源需要5V的，是否共地，以及舵机的电流等。&lt;/p&gt;
&lt;p&gt;舵机部分供电采取DC直流5V，&lt;/p&gt;
&lt;p&gt;舵机控制板，先采取笔记本电脑使用usb转串口模块连接，然后利用一些上位机程序，控制舵机的一定角度的旋转，&lt;/p&gt;
&lt;p&gt;舵机控制板的一些指令集：&lt;/p&gt;
&lt;h5&gt;0x11 蓝牙与舵机控制板的连接测试&lt;/h5&gt;
&lt;p&gt;首先需要考虑蓝牙模块供电问题，&lt;/p&gt;
&lt;h5&gt;0x100 参考文献&lt;/h5&gt;
&lt;p&gt;《ARM体系结构与外设接口实战开发》(北京航空航天大学出版社)&lt;/p&gt;</summary><category term="电子设计"></category><category term="解魔方机器人"></category></entry><entry><title>基于Arduino的解魔方机器人详细思考</title><link href="dubuqingfeng.github.io/posts/2015/%203/20/201503-Rubik's-Cube-Robot-Xiangxisikao/index.html" rel="alternate"></link><updated>2015-03-20T20:12:00+01:00</updated><author><name>admin</name></author><id>tag:,2015-03-20:dubuqingfeng.github.io/posts/2015/ 3/20/201503-Rubik's-Cube-Robot-Xiangxisikao/index.html</id><summary type="html">&lt;h5&gt;0x01 显示屏大显部分&lt;/h5&gt;
&lt;p&gt;常见的魔方比赛可以&lt;/p&gt;
&lt;h5&gt;0x02 系统设计框图设计&lt;/h5&gt;
&lt;p&gt;主控板采取官方平台LM3S615平台，其供电采取电源适配器转3.3V(5V)，&lt;/p&gt;
&lt;h5&gt;0x03 系统流程图设计&lt;/h5&gt;
&lt;p&gt;首先需要采集魔方，采集颜色信息，将其转换为矩阵表示。然后进行算法求解，计算出算法以后，通过蓝牙等适配器将求解步骤传到下位机，然后下位机连接好魔方，进行控制舵机进行旋转。&lt;/p&gt;
&lt;h5&gt;0x04 电路板设计&lt;/h5&gt;
&lt;p&gt;电路板部分涉及到了通用版。&lt;/p&gt;
&lt;h5&gt;0x05 材料的选择&lt;/h5&gt;
&lt;p&gt;1.魔方：采用5.7CM的标准魔方，以顺滑和容错为标准，适当调整螺丝。
2.蓝牙适配器：现有HC-05和HM-10两种，主要是下位机接收命令的，应该是配置成从机。&lt;/p&gt;</summary><category term="电子设计"></category><category term="解魔方机器人"></category></entry><entry><title>基于Arduino的解魔方机器人初步设计</title><link href="dubuqingfeng.github.io/posts/2015/%203/08/201503-Rubik's-Cube-Robot-start/index.html" rel="alternate"></link><updated>2015-03-08T20:12:00+01:00</updated><author><name>admin</name></author><id>tag:,2015-03-08:dubuqingfeng.github.io/posts/2015/ 3/08/201503-Rubik's-Cube-Robot-start/index.html</id><summary type="html">&lt;h5&gt;0x01 材料&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Android手机(摄像头正常)&lt;/li&gt;
&lt;li&gt;魔方(5.7cm,非地摊货)&lt;/li&gt;
&lt;li&gt;亚克力板(充当底板部分以及部分机械手)&lt;/li&gt;
&lt;li&gt;舵机(因采取四向导轨式，所以大致需要8个舵机)&lt;/li&gt;
&lt;li&gt;舵机控制板？&lt;/li&gt;
&lt;li&gt;xxx控制板。&lt;/li&gt;
&lt;li&gt;开发用的计算机一台(配置好安卓开发环境，以及keil等，本次采用android studio)&lt;/li&gt;
&lt;li&gt;光滑小轮&lt;/li&gt;
&lt;li&gt;螺丝&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;0x02 整体结构&lt;/h5&gt;
&lt;p&gt;整体主要有四种结构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;四向推进式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大部分的解魔方机器人都是这种结构，基本不需要考虑魔方重力的影响，但是需要的舵机较多，控制也较为稳定，机械手的设计只需要考虑与魔方的配合，以及与舵机的连接。示例项目为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;垂直手臂式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种结构主要是将两个机械手垂直，魔方斜向控制，可以采用4个舵机，示例项目为&lt;a href="http://www.baidu.com"&gt;u&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单向旋转式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种结构主要旋转的是正反一个方向或者是，大部分的乐高机器人采取这种。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内嵌中心块式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种结构在解魔方速度上占优势，在有良好的解魔方算法后，可以达到秒级解魔方，有个视频采取这种结构的，只用了两三秒，不需要太多考虑伸缩或者推进。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设计出的结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结构需要同时考虑速度和性能，单向的需要旋转好几次，实际步骤稍微有点多，最快也大致三十秒，慢的也有七八分钟，由于速度上不占优势，所以没考虑这种结构；垂直手臂虽然相对于那种的结构稍微好点，但是机械手的设计还和魔方的重力有关系，重力和魔方与机械手的接触力的合力向下，由于机械部分不是很熟，感觉设计出的机械手不能在转魔方的时候承担重力的分力，也没太多考虑这种结构；内嵌中心块可能需要破坏魔方的结构，并且机械手需要另外找材料，切合度没有太多把握，可能需要将魔方的中心块卸下来，软件算法需要对应好魔方的配色，虽然解法较快，不需要推进后退所需的时间，但是也没太多地去考虑这种结构，&lt;/p&gt;
&lt;p&gt;最后得出的结构为四向导轨式的，然后在机械臂的推进部分与底盘连接的地方又有两种结构，一种类似于导轨式的滑动，另一种配置好塑料条，利用中间的孔将钢轴插入，前进后退。这时需要考虑材料的问题。&lt;/p&gt;
&lt;p&gt;四方给进轴为解魔方的主操作部分，给进轴由旋转主舵机和伸进从舵机两部分组成。主控由exp-xxx组成，后期可以改为arduino或者树莓派，arduino可以进一步降低成本，采用Android手机摄像头作为颜色采集和识别设备。&lt;/p&gt;
&lt;p&gt;整体设计框图：&lt;/p&gt;
&lt;p&gt;闭环控制模型：&lt;/p&gt;
&lt;h5&gt;0x03 机械手结构&lt;/h5&gt;
&lt;h5&gt;0x04 机械臂结构&lt;/h5&gt;
&lt;p&gt;机械臂大致有两种结构，一种是导轨式，另一种利用塑料条辅助进行推进伸缩。&lt;/p&gt;
&lt;h5&gt;0x05 软件算法方面设计&lt;/h5&gt;
&lt;p&gt;软件算法方面，由于计算的是手机的CPU，所以可以有几种思路，先进行类似于字典的大规模匹配，计算出最优解，或者是通过算法计算，计算出18-24步范围解，曾经魔方有一个上帝之数，为20，称任意打乱的魔方最少需要20步可以还原。同时考虑解魔方机器人每秒几步，统计出步数与时间，从而优化结构，升级舵机可以提高解魔方的速度。&lt;/p&gt;
&lt;p&gt;在得到魔方各面的颜色信息后，是先通过数据库进行匹配还是通过算法进行计算，这里有性能方面的问题。&lt;/p&gt;
&lt;p&gt;魔方解法方面，有一个二阶段算法，可以达到22左右的步数，并且较短时间可以计算出来。&lt;/p&gt;
&lt;h5&gt;0x06 软件摄像头部分及采集识别算法设计&lt;/h5&gt;
&lt;p&gt;app软件采集部分，利用手机后置摄像头，可以前期规定魔方的九个方块范围，后期想办法达到自动识别魔方方形，识别完方形以后，进行颜色的识别。&lt;/p&gt;
&lt;p&gt;颜色识别主要使用HSL色彩系，区别于传统的RGB色彩系，HSL更适合识别相关颜色。并且同时注意部分魔方的橙色黄色红色较为相近，注意分别。&lt;/p&gt;
&lt;h5&gt;0x07 材料的选择部分&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;魔方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;魔方采取5.7cm的三阶魔方，因为需要一定的顺滑度，因此不考虑普通的地摊三阶魔方进行主要测试，推荐大雁、国甲、圣手等牌子的魔方，魔方主要需要一定的顺滑度和容错度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;舵机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;舵机的选择，舵机主要采用金属舵机，其他类型的舵机有步进、减速、塑料等，主舵机负责旋转部分，要求的速度和扭矩都比从舵机要求要高，并且需要180度大扭动。以配合进行U2类型的旋转(魔方旋转术语，为上层顺时针旋转180度。)&lt;/p&gt;
&lt;p&gt;从舵机部分，要求扭矩大于3.0Kg/cm，&lt;/p&gt;
&lt;h5&gt;0x08 下位机控制部分&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;测试舵机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主舵机的连接测试。&lt;/p&gt;
&lt;p&gt;从舵机的连接arduino测试。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;电路部分整体设计&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;控制板：&lt;/p&gt;
&lt;p&gt;仿真器：&lt;/p&gt;
&lt;p&gt;稳压模块：&lt;/p&gt;
&lt;p&gt;舵机：保证6V电压&lt;/p&gt;
&lt;h5&gt;0x09 安卓手机软件设计部分&lt;/h5&gt;
&lt;p&gt;整体采用material design设计，使用Axure等的进行原型设计，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要有以下几个功能：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.摄像头识别魔方，计算解法，并通过串口传给下位机。&lt;/li&gt;
&lt;li&gt;2.指定或随机打乱公式打乱魔方。&lt;/li&gt;
&lt;li&gt;3.将魔方打出一定的花样，如一定摆放的I Love U，相对来说，高阶好摆图案。&lt;/li&gt;
&lt;li&gt;4.将解魔方所用时间如何显示到大显上。&lt;/li&gt;
&lt;li&gt;5.当三阶魔方完善以后扩展到二阶、四阶、五阶等魔方。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;关于界面方面的设计：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.采用material design设计，体现阴影等元素，采取滑动侧边栏，主界面分为三个选项卡:速解魔方，复原历史，计时复原。速解魔方有连接状态显示，蓝牙连接按钮，扫描摄像头，&lt;/li&gt;
&lt;li&gt;2.主要是使用户点击要少，&lt;/li&gt;
&lt;li&gt;3.主要功能为解魔方操作，识别魔方，计时等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;0x10 乐高机器人与之的辨析&lt;/h5&gt;
&lt;p&gt;乐高也有解魔方机器人，并且有专门的颜色传感器，&lt;/p&gt;</summary><category term="电子设计"></category><category term="解魔方机器人"></category></entry><entry><title>基于RFID的区域性物流定位的初步设计</title><link href="dubuqingfeng.github.io/posts/2015/%203/06/201503-RFID-RTLS-RSSI-start/index.html" rel="alternate"></link><updated>2015-03-07T11:00:00+01:00</updated><author><name>admin</name></author><id>tag:,2015-03-06:dubuqingfeng.github.io/posts/2015/ 3/06/201503-RFID-RTLS-RSSI-start/index.html</id><summary type="html">&lt;h5&gt;0x01 RFID定位&lt;/h5&gt;
&lt;p&gt;RFID技术，无线电频率识别，一种利用射频信号自动识别目标对象并获取相关信息的技术。超高频UHF及高频HF的RFID定位技术，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RFID 定位模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;p&gt;组成示意图：&lt;/p&gt;
&lt;p&gt;接口部分：&lt;/p&gt;
&lt;p&gt;电路部分：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RFID 标签&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分为主动式和被动式两种，主动式又称为有源标签，主动向读写器发送射频信号，被动式标签不带电池，又称为无源标签，其发射电波及内部所需能量来自读写器产生的电磁波，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;天线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;类型主要分为偶极子天线、微带贴片天线、线圈天线等&lt;/p&gt;
&lt;p&gt;工作模式：&lt;/p&gt;
&lt;p&gt;技术要求：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;中间件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分为软件中间件和硬件中间件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RFID 定位原理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;耦合方式分为两种，分为电感耦合(磁耦合)和反向散射耦合(电磁场耦合)两大类。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;电感耦合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;射频载波频率为13.56MHz和小于135kHz的频段，工作距离在1m以下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;电磁场耦合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;工作距离在1m以上。&lt;/p&gt;
&lt;h5&gt;0x02 RFID频率的选择&lt;/h5&gt;
&lt;h5&gt;0x03 微波(2.4GHz)相关技术及思考&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;天线设计&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;0x04 初步设计示意图&lt;/h5&gt;
&lt;h5&gt;0x05 网页端显示&lt;/h5&gt;
&lt;p&gt;通过自己设计的地图模型，以反映现实的具体环境，初期进行2D地图的模拟，逐步发展到2.5D，3D。&lt;/p&gt;
&lt;h5&gt;0x06 微信公众号的对接&lt;/h5&gt;
&lt;p&gt;使用weiphp开源程序进行微信公众平台的对接，可以搭设一些后台。通过实时传回的数据进行小车的定位显示。&lt;/p&gt;
&lt;h5&gt;0x07 相关标准&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;ISO/IEC 18000标准&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是控制空中接口的重要标准，允许的频段有6个，低于135kHz，13.56MHz，433MHz，860-930MHz，2.45GHz，5.8GHz。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ISO/IEC 18001标准&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有一定的外形标准&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ISO/IEC 10374标准&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基于微波应答器的集装箱识别标准，采用有源标签，&lt;/p&gt;
&lt;h5&gt;0x08 Q&amp;amp;A&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Question:定位的相关技术及对比？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;蓝牙，WIFI，Zigbee&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Question:读写器与主控的连接方式&lt;/p&gt;
&lt;p&gt;Question:有源标签的信号折射问题.&lt;/p&gt;
&lt;p&gt;Question:读写器天线节点的布置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;0x09 参考文献&lt;/h5&gt;
&lt;p&gt;部分参考《射频识别(RFID)原理与应用》(电子工业出版社)第1，3，4，5，6，9，10章&lt;/p&gt;
&lt;p&gt;《单片机与计算机串口通信实践》第一部分，第二部分第3，4章(单片机，串口通信基础)&lt;/p&gt;
&lt;p&gt;《RFID与传感器网络：架构、协议、安全与集成》(机械工业出版社)第10，19章&lt;/p&gt;
&lt;p&gt;《UHF RFID标签天线设计、仿真及实践》(电子工业出版社)&lt;/p&gt;
&lt;p&gt;《无线射频识别(RFID)技术基础》(北京航空航天大学出版社)&lt;/p&gt;</summary><category term="电子设计"></category><category term="RFID"></category></entry><entry><title>git-fork项目后与原项目进行同步</title><link href="dubuqingfeng.github.io/posts/2015/%203/04/201503-git-fork-synchronized/index.html" rel="alternate"></link><updated>2015-03-04T12:22:00+01:00</updated><author><name>admin</name></author><id>tag:,2015-03-04:dubuqingfeng.github.io/posts/2015/ 3/04/201503-git-fork-synchronized/index.html</id><summary type="html">&lt;h5&gt;0x01 与原项目进行同步&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;在github里，每当fork一个项目后，如何保持与原作者的同步？一般可以以下几步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.首先clone自己，从git获取自己仓库的内容。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/xxx.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.添加远程仓库
添加远程仓库的别名，获取远程仓库的内容并合并。如果有冲突则需要手动解决冲突。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git remote add username https://github.com/xxx.git
git fetch username
git merge username/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.提交改动，推到远程的master分支。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git commit -m &amp;quot;merge from username-xx&amp;quot;
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.查看本地仓库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git remote -v
git branch -a
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x02 git协同命令&lt;/h5&gt;
&lt;p&gt;如果是个人产品，不是那种产品需要上线的服务。&lt;/p&gt;
&lt;p&gt;当使用git进行协作开发的时候，可以设置好几个分支，以主分支master为开发版，Release分支为发行版。&lt;/p&gt;
&lt;p&gt;而产品类型的git协作时，主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。&lt;/p&gt;
&lt;p&gt;Git创建Develop分支的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git checkout -b develop master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将Develop分支发布到Master分支的命令：&lt;/p&gt;
&lt;p&gt;切换到Master分支&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git checkout master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对Develop分支进行合并&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git merge --no-ff develop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认情况下，Git执行"快进式合并"（fast-farward merge），会直接将Master分支指向Develop分支。
其他分支：&lt;/p&gt;
&lt;p&gt;功能（feature）分支&lt;/p&gt;
&lt;p&gt;预发布（release）分支&lt;/p&gt;
&lt;p&gt;修补bug（fixbug）分支&lt;/p&gt;
&lt;h5&gt;0x03 Pull Request&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;当某个人fork项目后，并推送改动后如何处理？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这时会收到一个open的Pull Request，然后决定是否合并，不合并可以忽略。&lt;/p&gt;</summary><category term="git"></category><category term="fork"></category></entry><entry><title>2014年的那些碎碎念。</title><link href="dubuqingfeng.github.io/posts/2015/%202/12/201502-2014/index.html" rel="alternate"></link><updated>2015-02-12T12:22:00+01:00</updated><author><name>admin</name></author><id>tag:,2015-02-12:dubuqingfeng.github.io/posts/2015/ 2/12/201502-2014/index.html</id><summary type="html">&lt;h5&gt;0x01 前言&lt;/h5&gt;
&lt;p&gt;转眼之间大学已度一半有余，没有了刚来大学的不习惯，逐渐地在寻找自己的那一只方向，从建立社团，到建立小组，以及各方面的为人处世，慢慢地提高自己，并且在所学领域希望也可以有一定的思考。&lt;/p&gt;
&lt;h5&gt;0x02 起&lt;/h5&gt;
&lt;p&gt;寒假里学习php代码审计以及一些安全方面基础部分的知识，假期结束后，和一些同学一块讨论去做三维的农大地图，使用3dmax或者maya进行绘制模型，后来也许因为分歧等原因，退出了相关活动，另外自己设备的落后也跟不上他们，还是他们弄吧。安心做做其他方面的事情，去试着写写书，在读者的角度，多弄一些图片，然后积累自己的这一方面的经验。&lt;/p&gt;
&lt;h5&gt;0x03 承&lt;/h5&gt;
&lt;p&gt;一开始“兴致勃勃”地去参加校学生会面试，面试网络中心，那时并不理解什么正装，只是随意的打扮，面试之时，尽力使自己不紧张，从社团慢慢开始介绍，到那次比赛，再到对计算机感兴趣，再到工作的想法，他们面试官也比较觉得特别，并且会说以后会联系，当初想去竞争这个职位，并不是想去得到一官半职，而是想对社团搞活动的时候也有所帮助，还可以去培养一些网络或者网站方面的人才。&lt;/p&gt;
&lt;p&gt;后来他们让做学生会网站，当时想法是通过织梦cms仿一套模板，然后将这托管到网络中心，后来了解到网络中心一般也不给这权限，当时也想也对，如果有个远程执行代码的漏洞，getshell，进一步提权，然后可以控制内网主机，织梦在后台可以直接上传文件而getshell，并且逐步开始接触CSS，去了解那些盒子模型，以及一些浮动等的基础知识，然后一知半解的去看超越css，css设计之禅等书籍，进行相关的设计，当时还没怎么接触bootstrap，使用基础的css进行设计，javascript当时也不会，后来又有一个做图书馆网站的任务，然后进行学习php，语法有的和C语言类似，进而学习如何去设计实例，设计分页。还需要注意如何避免sql注入和xss跨站攻击，以及后台登录的语句的拼接而避免万能密码的出现。记得当时一开始测试xss用例的时候，很容易弹出对话框，当然不同浏览器还有不同的方法。&lt;/p&gt;
&lt;p&gt;当时班级里还有一项统计科技创新项目的活动，班里找了几个人进行研究，当时说是会有资金支持，于是就想题目，从四轴飞行器到电动滑板车，再到一些电子设计方面的小的心型流水灯，还有特殊的盗梦陀螺，在效应和性能以及资料丰富度的各项比较中，最终选了四轴飞行器喷农药投炸弹的想法，通过控制其飞行，然后投一定的物体，这种应用当时也没有合适产品进行量产的。经过车老师的推荐，得到了信科院副院长的指点，然后还进行所需材料的统计，统计并查找资料，得出大致成本在一千元附近，电池也是航模电池的那种，然后进行改造，使其可以稳定的投放农药。后来这个项目还是没有得到资金，后来听说另外一个省级项目也没有得到相应的资金，所以被迫停止了，毕竟航模的东西好多都是烧钱的。&lt;/p&gt;
&lt;p&gt;社团还合作举行了计算机应用大赛，进行计算机基础方面的较量，虽然其中有不少尴尬，但是也没弄过类似的活动，好多都不熟悉。&lt;/p&gt;
&lt;p&gt;在五六月份的时候，感觉有点无聊，然后觉得还是报个比赛试试看，当时也有博创杯这种硬件方面的比赛，当时觉得硬件方面基本都不会，还是报个软件类的提高一下，于是选了个移动互联网创业的类型的，上面也有安全的方向，本身也对安全报有好感，所以还是选个题目，安全范围也比较广，移动安全还是属于比较热门的，然后结合点硬件方面的，进行一定的攻防，当时万能钥匙还不是很火，如何捍卫wifi，nfc之类的安全，这是思考的问题，然后设计了wifi安全管家和一个nfc安全助手，当时对安卓编程还是不是很了解，只是在13年接触过很少的东西，然后通过一些实例继续了解安卓编程方面的知识。不管能不能成功做出来以及效果如何，都是有所收获的，当时就应该觉得泛泛的不如专注一点去研究，并且这方面的资料也比较少，基本了解了一些安卓基础的知识。&lt;/p&gt;
&lt;h5&gt;0x04 转&lt;/h5&gt;
&lt;p&gt;当时有个孩子通过一些渠道，了解到我们可能会做一些网站，并且有个类似于单子的东西让我们试试看，大致是一个订餐平台，关于订餐的在13年也曾经想过，希望有一种更加良好的点评机制，然后暑假里开始设计，并且使用一些php的框架，当时思考再三，觉得应该使用一个好入门的框架进行设计，然后选择了thinkphp国人开发的这一个框架，当时对前端部分基本不会，于是分工让另一个孩子做前端部分，然后每天有空闲的时候，看看视频，看看文档，写写代码，同时又买了一套arduino设备，有空就可以开始鼓捣电子开源硬件吧，买了两块板，进行小灯泡，小开关等的搭建学习。在假期里有时也看看安卓的视频，做个小软件之类的，做了一个叫一个播放器，去思考安卓的视频播放器的实现过程，其中有底部选项卡，拼音归类，数据库sqlite的操作，Video播放等的知识点。&lt;/p&gt;
&lt;p&gt;假期总是很快的，开学之时讨论了一下，这个学期的发展。最后他们讨论出一个成立个工作室，做一个图书社交类的app，当时那几天也找下了工作地点，可以没事就可以去那工作或者休息，一开始有一个图书管理的想法，初步定位为一个图书管理加了社交功能，查看附近的人或者书，当时想的功能比较多，当然有的最后实现了有的没有，顺便报了两个比赛。但是基本都没什么结果。后来也可以总结几点，泛泛不如专注，有些人确实不是很容易去学会一些东西，大部分的东西都是只有我在做，直到最后才有几张图片，缺乏一种讨论的氛围，论团队合作的重要性。然后就有点不想和这个团队合作的感觉。&lt;/p&gt;
&lt;p&gt;由于那个二手笔记本噪声大，反应慢，感觉不太适合一些工作了，于是在网络寻觅一些性价比好的笔记本，主要考虑两点，便携和续航，最后选择了chromebook，第一次从国外买东西，很庆幸没被税，找了一款性价比还不错的型号，历经半个多月，笔记本也坐飞机。由于32G ssd不太适合装windows系统，于是装了ubuntu环境，享受linux的感觉。&lt;/p&gt;
&lt;p&gt;至于那个订餐项目，因为各方面的原因，种种不顺利，暂时就那么搁浅了。&lt;/p&gt;
&lt;h5&gt;0x05 合&lt;/h5&gt;
&lt;p&gt;十月，一开始在忙和完善图书社交平台，在赶进度。努力做出一个初步可以测试的产品，尽量在交的日期最后几刻不放弃。在交完作品以后发现在主界面部分如果不使用一些图片缓存框架的话，直接会导致报错，使用了一个图片缓存框架以后效果上不是很满意。但是当时没多想，也就没有抱太多希望。后来社团开始招新，然后就是一个联想茄子快传的比赛，基于他们的平台开发应用，联想社团那几天也是经常宣传，开宣讲会，虽然宣讲会那天看了一眼就走了，逐步从网络上了解这个比赛的信息，基本是做游戏，在上英语听说课的时候冒出一个做打砖块的想法，做游戏的话用引擎比较快，好多东西不需要深入考虑，于是找了几本cocos-2dx的书籍在那啃，感觉这个引擎社区人多，并且不是太笨重。从中了解导演、精灵、层等相关知识，当有一个初步的打砖块的模型的时候，准备结合人家的sdk进行进一步封装却遇到了问题，人家的是java写的，而这个引擎是C++，所以需要来回调用，所以用到了jni，但是jni处理相关调用的时候，却每次都没成功，实际上应该可以想办法解决，但是由于时间和经验问题，没精力去多想，既然人家的sdk是java的，就用java实现一个打砖块，然后结合起来吧。就这么连夜奋斗，做美工，做设计，就这么到了五十强，然后还得设计，还得完善，还得做美工，又是在临近交的日期，去连夜做。最后结果因为ui界面方面的分较其他的低所以没个好名次，毕竟ui不是强项，既不懂画图，也不懂原理。&lt;/p&gt;
&lt;p&gt;关于创业，有个孩子根据那个订餐项目报了一个校内的比赛，后来意外地进了前几名，直到决赛十强的时候，选到了最后一个出场，被迫借正装，关于市场的话编不了多少，所以有两孩子负责市场方面的提问，整体还是比较成功的，虽然项目和农业联系不太大，但是大多数评委还是很认可的，拿了金 奖。然后社团又参加山西省手机文化艺术节的展演，然后有时去去社团年会，然后又是晋商杯的创业比赛，根据六和杯创业比赛的名次，直接到了决赛，然后决赛虽然不是很好，但是也是没被淘汰，可以去榆次进一步比，但是榆次比的时候没太多准备，团队的协调不是很好，所以也结束了。&lt;/p&gt;
&lt;p&gt;在交完联想的作品以后，顺便看了一下搜狐快站的比赛，主要知识是前端部分的，基本不熟悉，但是做出个模型交得试一试吧，说不定人家让继续完善，结果这个比赛没多少人参加，一开始也是他们那边人联系的，一些比赛信息平台上也没有，最后取消了。后来这个比赛进入到了优秀选手，主办方要求发简历过去，试着看有没有实习机会。&lt;/p&gt;
&lt;h5&gt;0x06 后记&lt;/h5&gt;
&lt;p&gt;时间匆忙，应该有部分内容没有总结到。&lt;/p&gt;
&lt;p&gt;总结几点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;泛泛不如专注。&lt;/p&gt;
&lt;p&gt;有时间应该多去图书馆静心学习。&lt;/p&gt;
&lt;p&gt;不要急功近利。&lt;/p&gt;
&lt;p&gt;多进行总结。&lt;/p&gt;
&lt;p&gt;团队的协调问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;0x07 部分关键词&lt;/h5&gt;
&lt;p&gt;挂科，三维农大，学生会网站，社团活动，图书馆网站，移动互联网创业，wifi，nfc安全，饭盒网，四轴飞行器，移动互联网比赛，联想茄子快传，搜狐快站……&lt;/p&gt;</summary><category term="2014"></category><category term="年终总结"></category></entry><entry><title>php实现一些站长的工具</title><link href="dubuqingfeng.github.io/posts/2015/%202/12/201502-php-zhanzhang/index.html" rel="alternate"></link><updated>2015-02-12T12:11:11+01:00</updated><author><name>admin</name></author><id>tag:,2015-02-12:dubuqingfeng.github.io/posts/2015/ 2/12/201502-php-zhanzhang/index.html</id><summary type="html">&lt;h5&gt;0x01 前言&lt;/h5&gt;
&lt;p&gt;近期有一个任务，要求仿站长工具网，进行关键字，seo，whois，ip查询等。&lt;/p&gt;
&lt;h5&gt;0x02 计划与环境搭建&lt;/h5&gt;
&lt;p&gt;前端框架采用bootstrap，有一个比较方便的bootwatch，
生产环境的php版本为5.2.17，很多框架的新版本在5.3以下的不太适用，因此先搭建一个相应版本的php环境进行测试，
php要求性能的话，phalcon框架，是php的一个扩展&lt;/p&gt;
&lt;h5&gt;0x03 whois&lt;/h5&gt;
&lt;p&gt;whois功能需要根据域名后缀，来连接一些whois服务器进行查询，&lt;/p&gt;
&lt;h5&gt;0x04 ip查询&lt;/h5&gt;</summary><category term="php"></category><category term="whois"></category><category term="seo"></category></entry><entry><title>Hello,World!</title><link href="dubuqingfeng.github.io/posts/2015/%202/10/2015-create-blog/index.html" rel="alternate"></link><updated>2015-02-10T12:11:00+01:00</updated><author><name>admin</name></author><id>tag:,2015-02-10:dubuqingfeng.github.io/posts/2015/ 2/10/2015-create-blog/index.html</id><summary type="html">&lt;h5&gt;0x01 搭建环境&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux(Ubuntu)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Virtualenv

sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;MAC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican markdown

pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x02 写作环境&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Markdown&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要采取一款开源在线的markdown编辑器，并计划在其基础上进行改进，使其更加符合个人习惯。&lt;/p&gt;
&lt;h5&gt;0x03 修改主题&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Dubuqingfeng&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主题在bootstrap的样式和最近的material design材料样式之间纠结，在看了pelican的bootstrap的主题以后，想自己写一个主题，于是就去找关于material design设计的网站方面的资料，一开始谷歌推出这种设计语言的时候，大量应用于安卓应用，以摆脱应用风格不统一的问题，一些谷歌web网页也采取了这种设计。找到了多种设计框架，有material for bootstrap，materialize，...&lt;/p&gt;
&lt;p&gt;然后看了这两个官网，觉得materialize更简单，并且有相关实例，文档不难看懂，弄出的效果也接近material design。所以先用这种尝试写博客主题。写的时候，主要参考pelican文档里&lt;a href="http://pelican-docs-zh-cn.readthedocs.org/en/latest/themes.html"&gt;主题编写&lt;/a&gt;部分，进行相关样式及模板的修改。&lt;/p&gt;
&lt;p&gt;在templates文件夹下，有base.html文件，其他继承这个文件，并且模板中还可以包含其他文件。设置或者读取常量可以在pelicanconf.py中配置。&lt;/p&gt;
&lt;p&gt;主题源码都在&lt;a href="https://github.com/sxau-web-team/MaterialDesignPelicanTheme"&gt;这里&lt;/a&gt;，其中包含了用到的插件，以及个人博客的配置。&lt;/p&gt;
&lt;h5&gt;0x04 插件配置&lt;/h5&gt;
&lt;p&gt;目前主要使用了&lt;a href="https://github.com/sxau-web-team/MaterialDesignPelicanTheme/tree/master/pelican-plugins/sitemap"&gt;sitemap&lt;/a&gt;，&lt;a href="https://github.com/sxau-web-team/MaterialDesignPelicanTheme/tree/master/pelican-plugins/gravatar"&gt;gravatar&lt;/a&gt;这两个插件，以后采用新插件的时候，还会补充。&lt;/p&gt;
&lt;h5&gt;0x05 程序维护&lt;/h5&gt;
&lt;p&gt;pelican使用jinja2进行模板渲染，需要定期查看是否有新版本。&lt;/p&gt;
&lt;p&gt;jinja2&lt;/p&gt;
&lt;p&gt;flask&lt;/p&gt;
&lt;p&gt;Frozen-Flask&lt;/p&gt;
&lt;p&gt;相关系统：
Cactus&lt;/p&gt;
&lt;h5&gt;0x06 域名等服务配置&lt;/h5&gt;
&lt;p&gt;因blog放在github pages上，所以域名绑定可以在目录下建立名为CNAME的文件，里面保存顶级域名。然后域名A记录指向dubuqingfeng.github.io&lt;/p&gt;
&lt;p&gt;SSL证书配置？&lt;/p&gt;
&lt;p&gt;因blog为静态的，也不需要涉及后台的操作，所以https加密显得不是特别重要。&lt;/p&gt;
&lt;p&gt;RSS的配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Feed generation is usually not desired when developing
FEED_RSS = u&amp;quot;feeds/all.rss.xml&amp;quot;
CATEGORY_FEED_RSS=u&amp;quot;feeds/%s.rss.xml&amp;quot;
FEED_ALL_ATOM = &amp;#39;feeds/all.atom.xml&amp;#39;
CATEGORY_FEED_ATOM = None
TRANSLATION_FEED_ATOM = None
AUTHOR_FEED_ATOM = None
AUTHOR_FEED_RSS = None
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后RSS的地址为/feeds/all.rss.xml&lt;/p&gt;</summary><category term="github pages"></category><category term="pelican"></category></entry><entry><title>ubuntu下git入门与配置</title><link href="dubuqingfeng.github.io/posts/2014/11/18/201411-git-ubuntu/index.html" rel="alternate"></link><updated>2014-11-18T21:25:00+01:00</updated><author><name>admin</name></author><id>tag:,2014-11-18:dubuqingfeng.github.io/posts/2014/11/18/201411-git-ubuntu/index.html</id><summary type="html">&lt;h5&gt;0x01 git&lt;/h5&gt;
&lt;p&gt;GIT最初是由Linus Benedict Torvalds为了更有效地管理Linux内核开发而创立的分布式版本控制软件，与常用的版本控制工具如CVS、Subversion不同，它不必服务器端软件支持，速度和效率也有着相当程度的提高。&lt;/p&gt;
&lt;h5&gt;0x02 准备安装&lt;/h5&gt;
&lt;p&gt;从这里 http://git-scm.com/download 下载GIT或者使用wget命令获取&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ tar -zxf git-1.9.1.tar.gz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; git-1.9.1
$ make &lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local all
$ sudo make &lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者使用命令&lt;/p&gt;
&lt;p&gt;Debian/Ubuntu&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ apt-get install git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fedora&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ yum install git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;GIT默认安装在 /usr/local/bin ，安装之后可以验证一下是否安装好&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ whereis git
git: /usr/local/bin/git
$ git –version
git version 1.9.1
$ git –help
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置用户信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ git config –global user.name “dubuqingfeng”//给自己起个用户名
$ git config –global user.email “1135326346@qq.com”//填写自己的邮箱
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再验证一下配置信息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ git config –list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其实这些配置是存放在个人主目录下的 .gitconfig 文件中的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ cat ~/.gitconfig
&lt;span class="o"&gt;[&lt;/span&gt;user&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; dubuqingfeng
&lt;span class="nv"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1135326346@qq.com
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x03 配置&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ssh-keygen -t rsa -C “1135326346@qq.com”//填写email地址，然后一直“回车”ok
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开本地...ssh\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。&lt;/p&gt;
&lt;p&gt;登陆github系统。点击右上角的Account Settings—&amp;gt;SSH Public keys —&amp;gt; add another public keys&lt;/p&gt;
&lt;p&gt;把你本地生成的密钥复制到里面（key文本框中）， 点击add key 就ok了
接着打开git测试连接是否成功&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ssh -T git@github.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果提示：Hi dubuqingfeng You’ve successfully authenticated, but GitHub does not provide shell access. 说明连接成功了&lt;/p&gt;
&lt;h5&gt;0x04 git基础使用&lt;/h5&gt;
&lt;p&gt;1.创建新仓库
创建新文件夹，打开，然后执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以创建新的 git 仓库。
2.检出仓库
执行如下命令以创建一个本地仓库的克隆版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone /path/to/repository
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果是远端服务器上的仓库，命令会是这个样子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone username@host:/path/to/repository
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.添加与提交
可以计划改动（把它们添加到缓存区），使用如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add 
git add *
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git commit -m “代码提交信息”
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，改动已经提交到了 HEAD，但是还没到远端仓库。&lt;/p&gt;
&lt;p&gt;4.推送改动&lt;/p&gt;
&lt;p&gt;改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以把 master 换成想要推送的任何分支。&lt;/p&gt;
&lt;p&gt;如果还没有克隆现有仓库，并欲将仓库连接到某个远程服务器，可以使用如下命令添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git remote add origin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此你就能够将改动推送到所添加的服务器上去了。&lt;/p&gt;
&lt;p&gt;5.更新
要更新你的本地仓库至最新改动，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git pull
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x05 gitg&lt;/h5&gt;
&lt;p&gt;在ubuntu里使用过gitg的客户端，基本不大的项目够用。&lt;/p&gt;</summary><category term="git"></category><category term="ubuntu"></category></entry><entry><title>chromebook的ubuntu安装和软件配置</title><link href="dubuqingfeng.github.io/posts/2014/10/19/201410-chromebook-install-ubuntu/index.html" rel="alternate"></link><updated>2014-10-19T12:42:00+02:00</updated><author><name>admin</name></author><id>tag:,2014-10-19:dubuqingfeng.github.io/posts/2014/10/19/201410-chromebook-install-ubuntu/index.html</id><summary type="html">&lt;h5&gt;0x01 安装系统&lt;/h5&gt;
&lt;p&gt;需进入开发者模式，在关机状态下，按住Esc+F3（刷新）+电源键，启动Chromebook，看到ChromeOS系统损坏的界面以后（顺带一提，按方向键可以切换成不同的语 音；需要重装ChromeOS的话就在这个界面里插入ChromeOS恢复U盘，google下载）按Ctrl+D，系统提示是否确认要进入开发者模式，回车确认。然后等待系统重启，第一次重启会显示修复系统，耐心等待就可以了，从此系统就进入开发者模式。注意一旦开启开发者模式，开机界面都会显示一个警告界面。要么等待 30秒后系统自动启动，要么按Ctrl+D跳过等待时间。切记不可以按空格键，否则ChromeOS就自动关闭开发者模式了！&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
进入开发者模式的ChromeOS，不要登录google帐号。保持网络连通（我使用了手机usb分享网络，一开始还没研究翻墙），在登录界面按Ctrl+Alt+F2，切换到命令行界面。用chronos帐号登录，不需要密码。紧接着输入curl -L -O http://goo.gl/9sgchs下载脚本，然后sudo bash 9sgchs 执行脚本，保持网络畅通。&lt;/p&gt;
&lt;h5&gt;0x02 安装软件&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装emacs&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install emacs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置utf8&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo gedit /etc/default/locale
LANG=”en_US.UTF-8″
sudo gedit /etc/environment
LANG=”en_US.UTF-8″
LANGUAGE=”zh_CN:zh:en_US:en”
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装Apache2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install apache2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装PHP5&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install php5 libapache2-mod-php5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启Apache2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo /etc/init.d/apache2 restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装mysql&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install mysql-server
sudo apt-get install libapache2-mod-auth-mysql php5-mysql phpmyadmin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加phpmyadmin链接&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo ln -s /usr/share/phpmyadmin /var/www/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装chrome&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
dpkg -i google-chrome-stable_current_amd64.deb
apt-get install -f
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装git&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get install git
#git config --global user.name “dubuqingfeng”
#git config --global user.email “1135326346@qq.com”
#cd ~/.ssh
#ssh-keygen -t rsa -C &amp;quot;1135326346@qq.com&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装java&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd /usr/lib
mkdir jdk
tar xvzf jdk-8u45-linux-x64.tar.gz
cp -r ~/Download/jdk1.8.0_45 /usr/lib/jdk/
#gedit /etc/profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装adt，android-studio&lt;/p&gt;
&lt;p&gt;安装有道词典&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://codown.youdao.com/cidian/linux/youdao-dict_1.0.2~ubuntu_amd64.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x03 一些备份内容&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;pelican的博客&lt;/li&gt;
&lt;li&gt;android项目文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;0x04 链接&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/dubuqingfeng/c0c42a4805bee049321c#file-ubuntu-install-software-sh-L48"&gt;Gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dubuqingfeng/Chromebook-For-Chinese"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="chromebook"></category><category term="ubuntu"></category></entry><entry><title>利用VMProtect sdk和ASProtect sdk加密delphi程序</title><link href="dubuqingfeng.github.io/posts/2014/%207/28/201407-reverse-disassemble-delphi/index.html" rel="alternate"></link><updated>2014-07-28T20:48:00+02:00</updated><author><name>admin</name></author><id>tag:,2014-07-28:dubuqingfeng.github.io/posts/2014/ 7/28/201407-reverse-disassemble-delphi/index.html</id><summary type="html">&lt;h5&gt;0x01 前言&lt;/h5&gt;
&lt;p&gt;普通的一些加密壳能够较为容易的被脱掉，而一些稍微难一点壳，例如VMProtect等，刚入门的新手就不是那么好脱了，而这些壳也提供了一些sdk帮助我们加密需要加密的函数，使保护壳能够识别源码中需要加密保护的代码段。下面以我的一个delphi程序为例，介绍VMProtect sdk和EncryptPE的一些加密方法，其他vc，或者易语言写的程序也可以使用其进行加密。&lt;/p&gt;
&lt;h5&gt;0x02 VMProtect保护&lt;/h5&gt;
&lt;p&gt;VMProtect sdk保护方式可以有两种，map法和标记法，在官方文档中，有下述方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;it is possible by doing the following: use the main menu of the Delphi IDE 
to open the project options (Project – Options) and select the “Detailed” 
option in the “MAP file” group on the “Linker” tab:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201407reverse-disassemble-delphi-1.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;将项目设置中map文件的设置从无改成详细。&lt;/p&gt;
&lt;p&gt;可以看到产生了如图的map文件，map文件中包含了有关被链接的程序的下列信息：模块名称，为1文件的基名称，时间戳，来自程序的文件头（不是来自文件系统，程序中的组列表，包括每个组的起始地 址（节：偏移量的形式）、长度、组名和类；公共符号的列表，包括每个地址（节：偏移量的形式）、符号名称、平直地址和包含符号定义的obj文件；入口点（节：偏移量的形式），另外可以通过map文件确定程序奔溃的位置。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201407reverse-disassemble-delphi-2.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;然后下载VMProtect，官网上是未激活版。本文以注册版演示。&lt;/p&gt;
&lt;p&gt;载入文件后，VMProtect界面如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201407reverse-disassemble-delphi-3.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;VMProtect根据map文件得到了一些函数信息，然后F9即可进行编译加壳，然后会生成后缀为.vmp.exe的保护后的文件，在peid0.95中查壳，结果如图所示。虽然结果为什么都没找到，但是区段中已经有了vmp1，vmp0。可以以vmprotect来进行脱壳等操作。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201407reverse-disassemble-delphi-4.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;而语句标记法，主要利用了下列语句进行需要保护的代码的标记&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;asm&lt;/span&gt;
&lt;span class="x"&gt;db &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;EB&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;10,’VMProtect begin’,0 //标记开始处.&lt;/span&gt;
&lt;span class="x"&gt;end;&lt;/span&gt;
&lt;span class="x"&gt;//想保护的程序代码&lt;/span&gt;
&lt;span class="x"&gt;asm&lt;/span&gt;
&lt;span class="x"&gt;db &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;EB&lt;/span&gt;&lt;span class="x"&gt;,&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;0E,’VMProtect end’,0 //标记结束处.&lt;/span&gt;
&lt;span class="x"&gt;end;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vc当中标记模式为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; __asm    //标记开始处.
{
_emit 0xEB
_emit 0x10  //jmp 0x10
_emit 0x56  //ascii “VMProtect begin”,0
_emit 0x4D
_emit 0x50
_emit 0x72
_emit 0x6F
_emit 0x74
_emit 0x65
_emit 0x63
_emit 0x74
_emit 0x20
_emit 0x62
_emit 0x65
_emit 0x67
_emit 0x69
_emit 0x6E
_emit 0x00
}
//想保护的程序代码
__asm  //标记结束处.
{
_emit 0xEB
_emit 0x0E   //jmp 0x0e
_emit 0x56   //ascii “VMProtect end”,0
_emit 0x4D
_emit 0x50
_emit 0x72
_emit 0x6F
_emit 0x74
_emit 0x65
_emit 0x63
_emit 0x74
_emit 0x20
_emit 0x65
_emit 0x6E
_emit 0x64
_emit 0x00
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而在官方文档中，有下列例子可供参考，将sdk的动态链接库引入，在lib目录下有相关的dll文件，在library目录下也有相关的库文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Markers are inserted in the code to protect separate sections of the code and also
protect string constants. Markers are calls of imported procedures stored in an external
 DLL (VMProtectSDK32.dll is used for 32-bit applications and VMProtectSDK64.dll is used
for 64-bit applications; VMProtectDDK32.sys and VMProtectDDK64.sys respectively are
used to protect drivers), VMProtectSDK are used hereinafter. Procedures and functions
located in VMProtectSDK do not do anything and serve only as markers by which VMProtect
determines the borders of the protected code. Correspondingly, the beginning and end of a
protected block are marked in the following way:

Delphi
uses VMProtectSDK;
VMProtectBegin(MARKER_NAME);
…
VMProtectEnd;
C/C++
#include “VMProtectSDK.h”
VMProtectBegin(MARKER_NAME);
…
VMProtectEnd();
MASM
include VMProtectSDK.inc
invoke VMProtectBegin,SADD(MARKER_NAME)
…
invoke VMProtectEnd
Visual Basic
Call VarPtr(“VMProtect begin”)
…
Call VarPtr(“VMProtect end”)
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x03 VMProtect和ASProtect的混合加密&lt;/h5&gt;
&lt;p&gt;Asprotect也有相关的sdk，也提供了注册机制，主要delphi通过标记语句，{$I filename}，实现文件的引入，它主要有多态变形标记，crc检查标记，外壳完整性检查。不同的标记需要引入不同的文件，例如在多态变形标记中，示例为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Delphiexample&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;Procedure&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;begin&lt;/span&gt;
 &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$I&lt;/span&gt; &lt;span class="n"&gt;Inc&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;UserPolyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
 &lt;span class="c1"&gt;// some code&lt;/span&gt;
 &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还得引入相关的api，uses  aspr_api;&lt;/p&gt;
&lt;p&gt;如果有map文件时，在软件界面中也可以导入，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201407reverse-disassemble-delphi-5.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;在保护的时候即可自动识别函数。
试验的程序当先用VMProtect，后用ASProtect时，会出现一个如图文件损坏的对话框，可能是因为区段的问题，无法找到入口。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201407reverse-disassemble-delphi-6.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;而先用ASProtect，后用VMProtect时，程序正常运行，当然因为加壳的原因，在在线杀毒引擎中有23%的杀软(9/38)报告发现病毒。&lt;/p&gt;
&lt;h5&gt;0x04 MAP文件的结构&lt;/h5&gt;
&lt;p&gt;一开始是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; Start         Length     Name                   Class
 0001:00000000 00050F4CH .text                   CODE
 0002:00000000 000011D8H .data                   DATA
 0002:000011D8 00000BE1H .bss                    BSS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pe文件的区段:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Detailed map of segments，一些细节方面的东西
Address Publics by Name，然后一些关于函数的偏移量
Line numbers for SysConst(C:\Program Files (x86)\Borland\Delphi7\lib\
sysconst.pas) segment .text SysConst代码中行数的偏移量
Line numbers for Unit1(Unit1.pas) segment .text    代码中行数的偏移量
Line numbers for Project2(C:\Program Files (x86)\Borland\Delphi7\
Projects\Project2.dpr) segment .text
Bound resource files 与之相关的资源文件
Program entry point at 0001:00050EE0  程序入口点
&lt;/pre&gt;&lt;/div&gt;</summary><category term="逆向"></category><category term="delphi加密"></category></entry><entry><title>c程序的启动过程的反汇编分析</title><link href="dubuqingfeng.github.io/posts/2014/%207/24/201407-reverse-disassemble-c-main/index.html" rel="alternate"></link><updated>2014-07-24T15:42:00+02:00</updated><author><name>admin</name></author><id>tag:,2014-07-24:dubuqingfeng.github.io/posts/2014/ 7/24/201407-reverse-disassemble-c-main/index.html</id><summary type="html">&lt;h5&gt;0x01  工具准备&lt;/h5&gt;
&lt;p&gt;1.最简c代码一只&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;int main()
{
    return 0;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.ollydbg&lt;/p&gt;
&lt;p&gt;3.VC++6.0&lt;/p&gt;
&lt;p&gt;4.GCC（mingw）&lt;/p&gt;
&lt;h5&gt;0x02  代码分析&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;int main()
{
    return 0;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在gcc下，添加-nostdlib编译选项，即链接器不链接标准库，会提示以下错误信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;D:\Backup\我的文档\src&amp;gt;gcc main.c -nostdlib-o main.exe
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccmSU3wr.o:main.c:(.text+0x9): undefined reference to `__main’
collect2.exe: error: ld returned 1 exit status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于-nostdlib编译选项，只有命令行指定的项才传递给链接器。标准启动文件和库都不会传递给链接器。该选项隐式打开选项-nostartfiles 和-nodefaultlibs。该选项也可以写作–no-standard-libraries。&lt;/p&gt;
&lt;p&gt;在gcc执行汇编之后，在链接部分，当只打开选项-nostartfiles时，结果正常，未出现错误信息。而在-nodefaultlibs选项中，提示很多错误信息。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201407reverse-disassemble-c-main-1.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;说明main函数，依赖了一些系统标准库文件，在链接的时候，需要到了一些函数，例如pre_cpp_init、check_managed_app、pre_c_init、_tmainCRTStartup、_InterlockedCompareExchangePointer、duplicate_ppstrings、WinMainCRTStartup、mainCRTStartup、_mingw_prepare_except_fr_msvcr80_and_higher….&lt;/p&gt;
&lt;p&gt;汇编里面的_main就是C语言里面的main，是因为汇编器和C编译器对符号的命名差一个下划线。&lt;/p&gt;
&lt;p&gt;链接器会在系统标准库文件，类似于/lib/crt2.o的文件中，寻找_start符号，然后在_start中执行创建堆对象，栈，打开系统预先提供的设备，将argv,argc参数传入main函数，然后调用main函数。&lt;/p&gt;
&lt;h5&gt;0x03  vc main函数反汇编分析&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="mi"&gt;00401010&lt;/span&gt;   &lt;span class="n"&gt;push&lt;/span&gt;        &lt;span class="n"&gt;ebp&lt;/span&gt;   &lt;span class="c1"&gt;//在堆栈上保存EBP&lt;/span&gt;
&lt;span class="mi"&gt;00401011&lt;/span&gt;   &lt;span class="n"&gt;mov&lt;/span&gt;         &lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;esp&lt;/span&gt; &lt;span class="c1"&gt;//将堆栈当前位置给EBP，以在堆栈结构中存储值时的参考点&lt;/span&gt;
&lt;span class="mi"&gt;00401013&lt;/span&gt;   &lt;span class="n"&gt;sub&lt;/span&gt;         &lt;span class="n"&gt;esp&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;//分配空间&lt;/span&gt;
&lt;span class="mi"&gt;00401016&lt;/span&gt;   &lt;span class="n"&gt;push&lt;/span&gt;        &lt;span class="n"&gt;ebx&lt;/span&gt;  &lt;span class="c1"&gt;//保存数据段值&lt;/span&gt;
&lt;span class="mi"&gt;00401017&lt;/span&gt;   &lt;span class="n"&gt;push&lt;/span&gt;        &lt;span class="n"&gt;esi&lt;/span&gt; &lt;span class="c1"&gt;//源地址指针&lt;/span&gt;
&lt;span class="mi"&gt;00401018&lt;/span&gt;   &lt;span class="n"&gt;push&lt;/span&gt;        &lt;span class="n"&gt;edi&lt;/span&gt; &lt;span class="c1"&gt;//目的地址指针&lt;/span&gt;
&lt;span class="mi"&gt;00401019&lt;/span&gt;   &lt;span class="n"&gt;lea&lt;/span&gt;         &lt;span class="n"&gt;edi&lt;/span&gt;&lt;span class="o"&gt;,[&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;//装入有效地址，用来得到局部变量和函数参数的指针。这里[ebp-40h]就是基地址再向下偏移40h，就是前面说的为本地变量留出的空间的起始地址；将这个值装载入edi寄存器，从而得到局部变量的地址&lt;/span&gt;
&lt;span class="mi"&gt;0040101&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;   &lt;span class="n"&gt;mov&lt;/span&gt;         &lt;span class="n"&gt;ecx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;//在ecx寄存器存储10h&lt;/span&gt;
&lt;span class="mi"&gt;00401021&lt;/span&gt;   &lt;span class="n"&gt;mov&lt;/span&gt;         &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;CCCCCCCCh&lt;/span&gt;
&lt;span class="mi"&gt;00401026&lt;/span&gt;   &lt;span class="n"&gt;rep&lt;/span&gt; &lt;span class="n"&gt;stos&lt;/span&gt;    &lt;span class="n"&gt;dword&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;edi&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;//初始化局部变量空间,ds:[edi]&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;00401028&lt;/span&gt;   &lt;span class="n"&gt;xor&lt;/span&gt;         &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;eax&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;0040102&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;   &lt;span class="n"&gt;pop&lt;/span&gt;         &lt;span class="n"&gt;edi&lt;/span&gt; &lt;span class="c1"&gt;//恢复所有寄存器的值&lt;/span&gt;
&lt;span class="mi"&gt;0040102&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;   &lt;span class="n"&gt;pop&lt;/span&gt;         &lt;span class="n"&gt;esi&lt;/span&gt;
&lt;span class="mi"&gt;0040102&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;   &lt;span class="n"&gt;pop&lt;/span&gt;         &lt;span class="n"&gt;ebx&lt;/span&gt;
&lt;span class="mi"&gt;0040102&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;   &lt;span class="n"&gt;mov&lt;/span&gt;         &lt;span class="n"&gt;esp&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="c1"&gt;//恢复堆栈&lt;/span&gt;
&lt;span class="mi"&gt;0040102&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;   &lt;span class="n"&gt;pop&lt;/span&gt;         &lt;span class="n"&gt;ebp&lt;/span&gt;
&lt;span class="mi"&gt;00401030&lt;/span&gt;   &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="c1"&gt;//返回到源EIP地址&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vc查看调用栈，可以看到在main函数之前，系统还启动了mainCRTStartup函数，这个函数是控制台环境下多字节编码的启动函数。在kernel32.dll中地址7c816fd7处调用了mainCRTStartup函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;main() line 2
mainCRTStartup() line 206 + 25 bytes
KERNEL32! 7c816fd7()
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x04 ollydbg反汇编分析&lt;/h5&gt;
&lt;p&gt;Od载入，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201407reverse-disassemble-c-main-2.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;堆栈窗口如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201407reverse-disassemble-c-main-3.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;通过堆栈，可以看到kelnel32调用了入口函数(mainCRTStartup)，对于od来说，main函数并不是Entry point，而是mainCRTStartup函数。&lt;/p&gt;
&lt;p&gt;一直单步，单步到00401146处，od分析为调用GetVersion函数，获取当前运行平台的版本号，因为是控制台程序，所以获取版本号为ms-dos的版本信息。&lt;/p&gt;
&lt;p&gt;继续单步，单步到0040119E处，单步进入，可以看到有HeapCreate申请堆空间函数，大小由传递的参数决定，并且该call里有HeapDestroy销毁堆函数。因此0040119E为初始化堆空间，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201407reverse-disassemble-c-main-4.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;在004011C0处，od分析为GetCommandLineA函数，获取命令行参数信息的首地址。&lt;/p&gt;
&lt;p&gt;进入下面的那个call后，可以看到GetEnvironmentStringsW和GetEnvironmentStrings函数，获取环境变量的首地址，如图所示。以Unicode编码形式返回到寄存器和堆栈中，最后采用WideCharToMultiByte函数将Unicode字符串到一个多字节字符串&lt;/p&gt;
&lt;p&gt;&lt;img src="http://7s1qw7.com1.z0.glb.clouddn.com/blog201407reverse-disassemble-c-main-5.png" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;并且后续有参数分析的一些函数，环境变量信息分析，从而得到main函数所需的参数，然后在00402D4B位置，将参数传到main函数中，从而执行main函数中的内容。&lt;/p&gt;
&lt;h5&gt;0x05 后记&lt;/h5&gt;
&lt;p&gt;最近在阅读《c++反汇编与逆向分析技术揭秘》，在阅读到第三章认识启动函数，找到用户入口时，得知main函数之前系统要做一些准备工作，再加上上学期学的C语言程序入口函数不是main函数，而是_start函数，这不禁引发了一些思考，到底编译器在编译和系统执行程序的时候发生了什么，因此想以实例进行一定的分析。在思考的过程中，有些涉及到了编译器的知识，包括它如何工作的，汇编之后又是如何链接的，这一部分内容不太熟悉，这一方面得掌握编译原理的知识，还得学习编译器的相关内容。那些东西还没学，因此不免有一些缺憾。了解反汇编的一些内容，可以更深层次的理解相对底层的一些东西，包括栈，堆和寄存器的数据交换。另外并未使用到神器IDA，利用IDA会更好地静态分析一些函数。&lt;/p&gt;</summary><category term="C"></category><category term="反汇编"></category></entry><entry><title>计算机趣味知识竞赛活动总结</title><link href="dubuqingfeng.github.io/posts/2014/%206/12/201406-essay-match-summary/index.html" rel="alternate"></link><updated>2014-06-12T20:42:00+02:00</updated><author><name>admin</name></author><id>tag:,2014-06-12:dubuqingfeng.github.io/posts/2014/ 6/12/201406-essay-match-summary/index.html</id><summary type="html">&lt;p&gt;&lt;br&gt;
在一个农业大学，计算机方面发展不太好，大多数学生并不对计算机感兴趣，如何激发社团成员对计算机的兴趣，社团活动需要一定的变化。上学期让学有余力的同学进行讲课等活动，渴望更多同学激发兴趣，一块学习，可是效果却不如人意，大部分的人不听，就好像和他们毫不相干，我们更不会讲和上课老师讲的相似的内容，基本也是我们讲课人员精心备过课的，还有部分人听不懂，我们讲的也很基础，很简单。不会也应该积极提问，我们都很耐心的教的。因此需要活动形式的改变。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
面对各大高校积极筹办各类计算机比赛，如信息安全，acm算法，程序设计，图像设计，网络安全等类的比赛，最近中北大学也进行过比赛。咱们大学，在计算机方向发展的人还是较少，老师有时讲的很无趣，自学的人较少，且自学程度较浅，更何况没信息安全专业，没那方面的人才，以及也没有做acm算法类的，这又可以算到硬件方面也跟不上，没有相关的创新实验室，所以在咱们大学办高级点的计算机比赛实为困难，没人会那些比赛内容，办设计类的比赛需要前期投入许多，因此只能尝试计算机基础性知识比赛。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
社团是由兴趣爱好产生的。这个比赛初赛采取每个班出人的形式，一方面班长对本班计算机爱好者也有一定了解，另一方面，那些爱好者为了班级荣誉也好而去参加初赛，比自愿的形式较好。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
决赛的时候，由于准备不充分，没有相关经验，并没实际见过类似比赛，所以不能尽某些人的满意，一方面我们也在思考农业大学发展计算机比赛是否发展的下去，是否能为以后的信息化讲座等做好铺垫。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
还有策划书感觉不太完善，那会是电子设计创新社负责策划书。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
这类型的比赛，说重视也不重视，说不重视也有点重视。总之，每班出三个人也去不了，自愿的就更少了，去的人整体水平并不高，因此这类型的比赛也发展不起来。像计算机方面的比赛还是很多的，例如网络攻防，acm算法，网页设计等。比计算机基础知识的比赛难的还有很多，但是大学里没几个研究这方面的内容，是很难办得起的。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
高校应该更好地培养同学们的兴趣，而不应该扼杀兴趣。以前对教学工作的印象是一个老头在无聊地讲着PPT，来了以后，虽然比老头更年轻点，但是扼杀兴趣的能力依然很厉害。反而限制同学们的思维自由，言论自由。&lt;/p&gt;</summary><category term="随笔"></category></entry><entry><title>解放思想，实事求是</title><link href="dubuqingfeng.github.io/posts/2014/%206/11/201406-essay-mind-facts/index.html" rel="alternate"></link><updated>2014-06-11T16:42:00+02:00</updated><author><name>admin</name></author><id>tag:,2014-06-11:dubuqingfeng.github.io/posts/2014/ 6/11/201406-essay-mind-facts/index.html</id><summary type="html">&lt;p&gt;&lt;br&gt;
什么是真正的解放思想，思想真的自由么，不是思想自由的解放思想可能会“思想永远得不到解放”，风筝如何能飞得更高更远，亦在于风势，亦在于风筝人。如何扩大高校影响力，莫不过加强学科建设、提高教学水平、加强科研工作、扩大对外开 放等。一如高校建立五星级酒店，实属本末倒置，未能研究高深学问，逐渐变得官僚化、利益化。未能将学术研究、教学育人当成主要任务，反而苦苦纠结于蝇头小利，反而将思想进行了禁锢，未能更自由更开放。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
大量的扩招，不仅降低了门槛，而且下降了质量。多少年的应试教育，换不来几年的素质教育。素质教育在于创造性能力、自学能力、社会公德、世界观、人生观等的培养，这恰恰是当今人们所需要的，长期推行应试教育，到底能得到什么呢，想要得到什么呢，反而有了更多的约束，更多的限制。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
某些人，某些事，或许不想评论，或许不需评论。强迫的事反而要说不强迫，究竟什么支持了这种想法，虚伪对待他人，人如饮水，冷暖自知，于是就发生了变质。反而有些人却要宣传“解放思想，实事求是”，做到“团结一致向前看”了么？&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
如何能解决问题？敞开思想，发挥民主，畅所欲言，敢于讲真话，讲实在话。思想并不是无限度的，但不是禁锢的，否则问题只会在根深蒂固的时候逐渐暴露。很多 同志思想不够解放，还处在僵化状态。他们还将很多人们的思想封闭在他们划的圈中，不准越雷池一步，否则就要追查。这样如何发展，如何成为硬道理。民主集中 制受到破坏，确实存在权力过分集中的官僚主义，常常以“禁止越权”、“逐级上报”、“不允许的事情不能做”、“做事前得问问意见”的面貌出现。许多重大问题往往是一两个人说了算，别人只能奉命行事。这样，大家就什么问题都用不着思考了，更谈不上什么思想解放。还有是非功过不清，赏罚不明，做和不做一个样，甚至做得好也受打击，在不成文的规定之下，人们更不愿意去思考了。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
邓小平曾经讲过，用人的政治标准是什么？为人民造福，为发展生产力、为社会主义事业作出积极贡献，这就是主要的政治标准。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
毛泽东思想核心就是实事求是，就是是一说一，是二说二，严格按照客观现实思考或办事。从实际情况出发，不夸大，不缩小，正确地对待和处理问题，求得正确的结论。倡导“知行合一，实事求是”。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
引用点百度百科资料，1940年在《新民主主义论》中谈到“中国向何处去”时指出唯有科学的态度和负责的精神，才能引导我们的民族达到解放之路。他说：“科学的态度是‘实事求是’，‘自以为是’和‘好为人师’那样狂妄的态度是决不能解决问题的”(《毛泽东选集》第2卷，第663页)。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
最后以一句歌词结尾，听听这首歌吧。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
求名利，无了时，千金难买好人生。&lt;/p&gt;</summary><category term="随笔"></category></entry></feed>