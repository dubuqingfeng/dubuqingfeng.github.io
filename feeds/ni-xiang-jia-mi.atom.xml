<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>独步清风's blog - 【逆向加密】</title><link href="dbqf.xyz/" rel="alternate"></link><link href="dbqf.xyz/feeds/ni-xiang-jia-mi.atom.xml" rel="self"></link><id>dbqf.xyz/</id><updated>2014-07-28T20:48:00+02:00</updated><entry><title>利用 VMProtect sdk 和 ASProtect sdk 加密 delphi 程序</title><link href="dbqf.xyz/posts/2014/%207/28/201407-reverse-disassemble-delphi/index.html" rel="alternate"></link><published>2014-07-28T14:32:00+02:00</published><updated>2014-07-28T20:48:00+02:00</updated><author><name>admin</name></author><id>tag:None,2014-07-28:dbqf.xyz/posts/2014/ 7/28/201407-reverse-disassemble-delphi/index.html</id><summary type="html">&lt;p&gt;下面以我的一个 delphi 程序为例，介绍VMProtect sdk和EncryptPE的一些加密方法，其他vc，或者易语言写的程序也可以使用其进行加密。&lt;/p&gt;</summary><content type="html">&lt;h5&gt;0x01 前言&lt;/h5&gt;
&lt;p&gt;普通的一些加密壳能够较为容易的被脱掉，而一些稍微难一点壳，例如VMProtect等，刚入门的新手就不是那么好脱了，而这些壳也提供了一些sdk帮助我们加密需要加密的函数，使保护壳能够识别源码中需要加密保护的代码段。下面以我的一个delphi程序为例，介绍VMProtect sdk和EncryptPE的一些加密方法，其他vc，或者易语言写的程序也可以使用其进行加密。&lt;/p&gt;
&lt;h5&gt;0x02 VMProtect保护&lt;/h5&gt;
&lt;p&gt;VMProtect sdk保护方式可以有两种，map法和标记法，在官方文档中，有下述方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;it is possible by doing the following: use the main menu of the Delphi IDE &lt;/span&gt;
&lt;span class="err"&gt;to open the project options (Project – Options) and select the “Detailed” &lt;/span&gt;
&lt;span class="err"&gt;option in the “MAP file” group on the “Linker” tab:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="https://oijlbmkg8.qnssl.com/blog201407reverse-disassemble-delphi-1.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;将项目设置中map文件的设置从无改成详细。&lt;/p&gt;
&lt;p&gt;可以看到产生了如图的map文件，map文件中包含了有关被链接的程序的下列信息：模块名称，为1文件的基名称，时间戳，来自程序的文件头（不是来自文件系统，程序中的组列表，包括每个组的起始地 址（节：偏移量的形式）、长度、组名和类；公共符号的列表，包括每个地址（节：偏移量的形式）、符号名称、平直地址和包含符号定义的obj文件；入口点（节：偏移量的形式），另外可以通过map文件确定程序奔溃的位置。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://oijlbmkg8.qnssl.com/blog201407reverse-disassemble-delphi-2.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;然后下载VMProtect，官网上是未激活版。本文以注册版演示。&lt;/p&gt;
&lt;p&gt;载入文件后，VMProtect界面如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://oijlbmkg8.qnssl.com/blog201407reverse-disassemble-delphi-3.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;VMProtect根据map文件得到了一些函数信息，然后F9即可进行编译加壳，然后会生成后缀为.vmp.exe的保护后的文件，在peid0.95中查壳，结果如图所示。虽然结果为什么都没找到，但是区段中已经有了vmp1，vmp0。可以以vmprotect来进行脱壳等操作。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://oijlbmkg8.qnssl.com/blog201407reverse-disassemble-delphi-4.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;而语句标记法，主要利用了下列语句进行需要保护的代码的标记&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;asm&lt;/span&gt;
&lt;span class="err"&gt;db $EB,$10,’VMProtect begin’,0 //标记开始处.&lt;/span&gt;
&lt;span class="err"&gt;end;&lt;/span&gt;
&lt;span class="err"&gt;//想保护的程序代码&lt;/span&gt;
&lt;span class="err"&gt;asm&lt;/span&gt;
&lt;span class="err"&gt;db $EB,$0E,’VMProtect end’,0 //标记结束处.&lt;/span&gt;
&lt;span class="err"&gt;end;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vc当中标记模式为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt; __asm    //标记开始处.&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;_emit 0xEB&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x10  //jmp 0x10&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x56  //ascii “VMProtect begin”,0&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x4D&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x50&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x72&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x6F&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x74&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x65&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x63&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x74&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x20&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x62&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x65&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x67&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x69&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x6E&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x00&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;//想保护的程序代码&lt;/span&gt;
&lt;span class="err"&gt;__asm  //标记结束处.&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;_emit 0xEB&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x0E   //jmp 0x0e&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x56   //ascii “VMProtect end”,0&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x4D&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x50&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x72&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x6F&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x74&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x65&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x63&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x74&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x20&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x65&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x6E&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x64&lt;/span&gt;
&lt;span class="err"&gt;_emit 0x00&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而在官方文档中，有下列例子可供参考，将sdk的动态链接库引入，在lib目录下有相关的dll文件，在library目录下也有相关的库文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Markers&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;inserted&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;protect&lt;/span&gt; &lt;span class="n"&gt;separate&lt;/span&gt; &lt;span class="n"&gt;sections&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt;
&lt;span class="n"&gt;protect&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Markers&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;calls&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;imported&lt;/span&gt; &lt;span class="n"&gt;procedures&lt;/span&gt; &lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt;
 &lt;span class="n"&gt;DLL&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VMProtectSDK32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dll&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;applications&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;VMProtectSDK64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dll&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;applications&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;VMProtectDDK32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;VMProtectDDK64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt; &lt;span class="n"&gt;respectively&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt;
&lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;protect&lt;/span&gt; &lt;span class="n"&gt;drivers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;VMProtectSDK&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;hereinafter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Procedures&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;functions&lt;/span&gt;
&lt;span class="n"&gt;located&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;VMProtectSDK&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;anything&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt; &lt;span class="k"&gt;only&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;markers&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;VMProtect&lt;/span&gt;
&lt;span class="n"&gt;determines&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;borders&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Correspondingly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;beginning&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;marked&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;Delphi&lt;/span&gt;
&lt;span class="n"&gt;uses&lt;/span&gt; &lt;span class="n"&gt;VMProtectSDK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;VMProtectBegin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MARKER_NAME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="n"&gt;VMProtectEnd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;VMProtectSDK&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="n"&gt;VMProtectBegin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MARKER_NAME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="n"&gt;VMProtectEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;MASM&lt;/span&gt;
&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="n"&gt;VMProtectSDK&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt; &lt;span class="n"&gt;VMProtectBegin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;SADD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MARKER_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt; &lt;span class="n"&gt;VMProtectEnd&lt;/span&gt;
&lt;span class="n"&gt;Visual&lt;/span&gt; &lt;span class="n"&gt;Basic&lt;/span&gt;
&lt;span class="k"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;VarPtr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;VMProtect&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="k"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;VarPtr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;VMProtect&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;0x03 VMProtect 和 ASProtect 的混合加密&lt;/h5&gt;
&lt;p&gt;Asprotect 也有相关的sdk，也提供了注册机制，主要 delphi 通过标记语句，{$I filename}，实现文件的引入，它主要有多态变形标记，crc 检查标记，外壳完整性检查。不同的标记需要引入不同的文件，例如在多态变形标记中，示例为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Delphiexample&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="k"&gt;Procedure&lt;/span&gt; &lt;span class="nf"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;begin&lt;/span&gt;
 &lt;span class="cm"&gt;{$I Inc\UserPolyBuffer.inc}&lt;/span&gt;
 &lt;span class="c1"&gt;// some code&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还得引入相关的api，uses  aspr_api;&lt;/p&gt;
&lt;p&gt;如果有map文件时，在软件界面中也可以导入，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://oijlbmkg8.qnssl.com/blog201407reverse-disassemble-delphi-5.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;在保护的时候即可自动识别函数。
试验的程序当先用VMProtect，后用ASProtect时，会出现一个如图文件损坏的对话框，可能是因为区段的问题，无法找到入口。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://oijlbmkg8.qnssl.com/blog201407reverse-disassemble-delphi-6.jpg" class="responsive-img"&gt;&lt;/p&gt;
&lt;p&gt;而先用ASProtect，后用VMProtect时，程序正常运行，当然因为加壳的原因，在在线杀毒引擎中有23%的杀软(9/38)报告发现病毒。&lt;/p&gt;
&lt;h5&gt;0x04 MAP文件的结构&lt;/h5&gt;
&lt;p&gt;一开始是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt; Start         Length     Name                   Class&lt;/span&gt;
&lt;span class="err"&gt; 0001:00000000 00050F4CH .text                   CODE&lt;/span&gt;
&lt;span class="err"&gt; 0002:00000000 000011D8H .data                   DATA&lt;/span&gt;
&lt;span class="err"&gt; 0002:000011D8 00000BE1H .bss                    BSS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pe文件的区段:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Detailed map of segments，一些细节方面的东西&lt;/span&gt;
&lt;span class="err"&gt;Address Publics by Name，然后一些关于函数的偏移量&lt;/span&gt;
&lt;span class="err"&gt;Line numbers for SysConst(C:\Program Files (x86)\Borland\Delphi7\lib\&lt;/span&gt;
&lt;span class="err"&gt;sysconst.pas) segment .text SysConst代码中行数的偏移量&lt;/span&gt;
&lt;span class="err"&gt;Line numbers for Unit1(Unit1.pas) segment .text    代码中行数的偏移量&lt;/span&gt;
&lt;span class="err"&gt;Line numbers for Project2(C:\Program Files (x86)\Borland\Delphi7\&lt;/span&gt;
&lt;span class="err"&gt;Projects\Project2.dpr) segment .text&lt;/span&gt;
&lt;span class="err"&gt;Bound resource files 与之相关的资源文件&lt;/span&gt;
&lt;span class="err"&gt;Program entry point at 0001:00050EE0  程序入口点&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="【逆向加密】"></category><category term="逆向"></category><category term="delphi加密"></category></entry></feed>