<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>独步清风's blog</title><link>dubuqingfeng.github.io/</link><description></description><atom:link href="dubuqingfeng.github.io/feeds/weban-quan.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 24 May 2016 22:34:00 +0200</lastBuildDate><item><title>XSS Filter</title><link>dubuqingfeng.github.io/posts/2016/%205/23/201605-xss-filter/index.html</link><description>&lt;h5&gt;0x01  前言及TOC&lt;/h5&gt;
&lt;p&gt;最近在看XSS的相关内容，也有很多需要注意的东西。在平时的开发及设计当中，不可避免的会遇到XSS，于是就有了设计一些filter的想法，以前也在phithon的github上看到过Python的&lt;a href="https://github.com/phith0n/python-xss-filter"&gt;XSS filter&lt;/a&gt;，毕竟自己动手实现一个对于理解XSS，以及过滤的相关事情是很有帮助的。因此设计一些简单的filter，以备自己使用，并且这些filter是不安全的，不要放在生产环境，毕竟没有经过一些专业的检测，以及自己的JavaScript和XSS水平有待提高。以及以后可能还会写一些如何attack 这个filter的文章。&lt;/p&gt;
&lt;p&gt;TOC：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基础的filter&lt;/p&gt;
&lt;p&gt;Python filter设计&lt;/p&gt;
&lt;p&gt;Java filter设计&lt;/p&gt;
&lt;p&gt;PHP filter设计&lt;/p&gt;
&lt;p&gt;系统层面filter&lt;/p&gt;
&lt;p&gt;后记&lt;/p&gt;
&lt;p&gt;相关paper&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;0x02  基础的filter&lt;/h5&gt;
&lt;p&gt;首先需要过滤&amp;lt;&amp;gt;"()/script等字符("&amp;gt;_&amp;lt;script123")，在PHP里可以使用preg_replace函数去过滤，并且通过htmlspecialchars函数转换为HTML实体编码。即：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;function safe_replace($content){&lt;/span&gt;
&lt;span class="x"&gt;    $tags = array(&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;&amp;#39;&amp;lt;iframe[^&amp;gt;]*?&amp;gt;.*?&amp;lt;/iframe&amp;gt;&amp;#39;is&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;&amp;#39;&amp;lt;frame[^&amp;gt;]*?&amp;gt;.*?&amp;lt;/frame&amp;gt;&amp;#39;is&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;&amp;#39;&amp;lt;script[^&amp;gt;]*?&amp;gt;.*?&amp;lt;/script&amp;gt;&amp;#39;is&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;&amp;#39;&amp;lt;head[^&amp;gt;]*?&amp;gt;.*?&amp;lt;/head&amp;gt;&amp;#39;is&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;&amp;#39;&amp;lt;title[^&amp;gt;]*?&amp;gt;.*?&amp;lt;/title&amp;gt;&amp;#39;is&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;&amp;#39;&amp;lt;meta[^&amp;gt;]*?&amp;gt;&amp;#39;is&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;&amp;#39;&amp;lt;link[^&amp;gt;]*?&amp;gt;&amp;#39;is&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;    );&lt;/span&gt;
&lt;span class="x"&gt;    return preg_replace($tags, &amp;quot;&amp;quot;, $content);&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;span class="x"&gt;echo htmlspecialchars(safe_replace($content));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里可以采用&lt;a href="https://github.com/zicai/xss-learn/"&gt;zicai的XSS-learn代码&lt;/a&gt;进行实验。&lt;/p&gt;
&lt;p&gt;java可以使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;replaceAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;replaceAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.lang.StringEscapeUtils&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;StringEscapeUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;escapeHtml&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;script&amp;gt;alert(&amp;#39;xss&amp;#39;)&amp;lt;/script&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//如果引用spring框架&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.web.util.HtmlUtils&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;HtmlUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;htmlEscape&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当有了过滤以后，测试&amp;lt;&amp;gt;"(号时，发现&amp;lt;&amp;gt;被转义成&lt;code&gt;&amp;amp;lt;&lt;/code&gt;和&lt;code&gt;&amp;amp;gt;&lt;/code&gt;，而"(等的并没有转义，当时怀疑是被实体编码了。当看到实际代码时，发现是字符串正则替换，后来一想，如果是类似于httpspecialchars那种的实体编码的话，引号也应该转义才对。当时还想着怎么绕过实体编码转义，于是又有了一个问题，关于java里的escapeHtml的底层实现是怎样的？以及实体编码是怎样的过程，似乎这个有点偏离主题了，这个完了再思考去写一篇总结编码的文章。&lt;/p&gt;
&lt;p&gt;而在Python里可以使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cgi&lt;/span&gt;
&lt;span class="n"&gt;cgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上都是一些正则过滤和escape编码的手段，当然不会过滤掉所有的XSS，仅可以防御一些小白。&lt;/p&gt;
&lt;p&gt;还是会有人去寻找其他的可控点，或者想办法去绕过过滤。&lt;/p&gt;
&lt;p&gt;当然这可以过滤&lt;strong&gt;';alert(String.fromCharCode(88,83,83))&lt;/strong&gt;这种的攻击向量么，如果可控点在JavaScript代码里呢，或者javascript伪协议，例如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;javascript:alert(&amp;#39;xss&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以及如果使用黑名单去过滤javascript伪协议的XSS，可以使用一些空格或者回车Tab等的绕过。即：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;javas&lt;/span&gt;
&lt;span class="s"&gt;cript:&lt;/span&gt;
&lt;span class="s"&gt;alert(/xss/)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如何去过滤这种的呢？&lt;/p&gt;
&lt;p&gt;将换行符换成\n，将回车符换成\r，将制表符换成\t，空格可以遍历去除。&lt;/p&gt;
&lt;p&gt;当过滤完这种的以后呢，又会出现一些大小写混淆或者十进制十六进制编码或者注释的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;JavaScRiPt:alert(&amp;#39;xss&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jav&amp;amp;#97;ascript:alert(&amp;#39;xss);&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jav&amp;amp;#x09;ascript:alert(&amp;#39;xss);&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jav/**/ascript:alert(&amp;#39;xss&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;面对这些，如果过滤&lt;code&gt;/*&amp;amp;#javascript\;&lt;/code&gt;，不如采取一些白名单的形式，仅允许执行特定形式的，去正则匹配结果。例如：仅允许&lt;code&gt;&amp;lt;img src="http://"&amp;gt;&lt;/code&gt;这种的。&lt;/p&gt;
&lt;p&gt;可以构造正则语句："/^((http|ftp|https):\/\/)?[\w-&lt;em&gt;.]+(\/[\w-&lt;/em&gt;]+)*\/?$/"&lt;/p&gt;
&lt;p&gt;如果单纯地过滤一些常见的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签或者&lt;code&gt;onerror、onResume&lt;/code&gt;等事件，还是可能会利用&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;引入一个内容为如下的CSS进行hack。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;javascript:alert(&amp;quot;XSS&amp;quot;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然还是要记得去判断变量类型，数字型的直接判断是否是数字，字符型的限定一些长度，并且不能有特殊字符，还有不能有&lt;a href="http://hx99.net/Article/Tech/201409/36125.html"&gt;拆分跨站法(疯狂的跨站之行)&lt;/a&gt;的出现。&lt;/p&gt;
&lt;p&gt;如果一直针对绕过的方法，去不断过滤，未免有点麻烦，应该设计一个统一的filter，加强防御。&lt;/p&gt;
&lt;h5&gt;0x03  Python filter设计&lt;/h5&gt;
&lt;p&gt;一些用户的输入都是不可信的。&lt;/p&gt;
&lt;p&gt;基础的过滤就得使用一些函数或者开源库:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;基础的过滤&lt;/span&gt;
&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;#58;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;以及一个富文本过滤类&lt;/span&gt;
&lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cleaner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clean_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;富文本过滤类的一种思路：&lt;/p&gt;
&lt;p&gt;1.解析HTML节点&lt;/p&gt;
&lt;p&gt;2.过滤白名单标签，删除不在白名单的标签，并且判断属性及属性值。&lt;/p&gt;
&lt;p&gt;以及一些框架的处理策略：&lt;/p&gt;
&lt;p&gt;tornado：&lt;/p&gt;
&lt;p&gt;Tornado框架原则上所有输出在模板里的变量都会经过"HTML实体化"，并且官方文档也给出了&lt;a href="http://wonko.com/post/html-escaping"&gt;一篇文章的链接&lt;/a&gt;，说明了仅过滤&amp;amp;, &amp;lt;, &amp;gt;, ", 和 ' 这些字符是不够的。&lt;/p&gt;
&lt;p&gt;tornado都会自动执行xhtml_escape方法，将&amp;lt;, &amp;gt;, ", ', 和&amp;amp;进行了转义。&lt;/p&gt;
&lt;p&gt;但是也需要针对特殊情况去过滤，关注一些输出在JavaScript代码的地方，进行特定形式的转义、正则匹配。&lt;/p&gt;
&lt;h5&gt;0x04  PHP filter设计&lt;/h5&gt;
&lt;p&gt;《XSS跨站脚本与防御》的第242页给出了一个通用的过滤XSS的函数，贴到了&lt;a href="https://gist.github.com/dubuqingfeng/019414ea26ddba6257c089c26ed3852c"&gt;gist&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;PHP在处理&lt;code&gt;$_GET&lt;/code&gt;、&lt;code&gt;$_POST&lt;/code&gt;、&lt;code&gt;$_REQUEST&lt;/code&gt;等变量时需过滤一次。&lt;/p&gt;
&lt;p&gt;需要使用一些filter_var()，filter_input()函数来进行构造一些规则，进行一些模式的匹配，过滤。&lt;/p&gt;
&lt;p&gt;网上的一个防止基本的XSS函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;function transform_HTML($string, $length = null) {&lt;/span&gt;
&lt;span class="x"&gt;    // Helps prevent XSS attacks&lt;/span&gt;
&lt;span class="x"&gt;    // Remove dead space.&lt;/span&gt;
&lt;span class="x"&gt;    $string = trim($string);&lt;/span&gt;
&lt;span class="x"&gt;    // Prevent potential Unicode codec problems.&lt;/span&gt;
&lt;span class="x"&gt;    $string = utf8_decode($string);&lt;/span&gt;
&lt;span class="x"&gt;    // HTMLize HTML-specific characters.&lt;/span&gt;
&lt;span class="x"&gt;    $string = htmlentities($string, ENT_NOQUOTES);&lt;/span&gt;
&lt;span class="x"&gt;    $string = str_replace(&amp;quot;#&amp;quot;, &amp;quot;&amp;amp;#35;&amp;quot;, $string);&lt;/span&gt;
&lt;span class="x"&gt;    $string = str_replace(&amp;quot;%&amp;quot;, &amp;quot;&amp;amp;#37;&amp;quot;, $string);&lt;/span&gt;
&lt;span class="x"&gt;    $length = intval($length);&lt;/span&gt;
&lt;span class="x"&gt;    if ($length &amp;gt; 0) {&lt;/span&gt;
&lt;span class="x"&gt;        $string = substr($string, 0, $length);&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;    return $string;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从代码可以看到，期间过滤的一些空格，Unicode转码的问题，一些十进制十六进制的编码，并且限定了长度，进行了HTML实体编码，针对基础的XSS问题足够了。可以设计一个函数，获取GET、POST、REQUEST参数的时候，可以进行XSS的防护。&lt;/p&gt;
&lt;p&gt;以及可以使用一些类似于HTML Purifier，或者一些富文本过滤类。&lt;/p&gt;
&lt;h5&gt;0x05  Java filter设计&lt;/h5&gt;
&lt;p&gt;Java Web方面，通过过滤一些Request请求，在GET或者POST请求层面进行过滤。&lt;/p&gt;
&lt;p&gt;Java里面本来就有一个Filter类，继承这个Filter类，然后可以通过构造一个XSSRequestWrapper，过滤一些HttpServletRequest，配置好Web.xml，使这个继承后的Filter类全局有效，进行自动的anti一些xss，过滤掉所有请求里的恶意脚本。&lt;/p&gt;
&lt;p&gt;在XSSRequestWrapper这个类里，需要重写一些getParameterValues(), getParameter() 和 getHeader()方法，期间实现一些过滤xss的函数，通过一些HTML实体编码的手段，以及正则匹配替换掉一些关键词，或者直接replaceAll去替换。&lt;/p&gt;
&lt;p&gt;Web.xml的配置方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- XSS过滤器  --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;XSSFilter&lt;span class="nt"&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;
com.sxau.filter.XssFilter
&lt;span class="nt"&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;XSSFilter&lt;span class="nt"&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class="nt"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以使用一些类似于&lt;a href="https://github.com/naver/lucy-xss-filter"&gt;Lucy-XSS : XssFilter, XssPreventer&lt;/a&gt;的模块去处理。&lt;/p&gt;
&lt;h5&gt;0x06  系统层面filter&lt;/h5&gt;
&lt;p&gt;这里的系统层面，侧重于WAF方面。&lt;/p&gt;
&lt;p&gt;WAF可以是硬件层面，也可以是软件层面，&lt;a href="https://github.com/loveshell/ngx_lua_waf"&gt;ngx_lua_waf&lt;/a&gt;就提供了一种基于nginx_lua的思路。&lt;/p&gt;
&lt;p&gt;通常会定义一些过滤规则，就像下面这样的正则匹配规则：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;\.\./&lt;/span&gt;
&lt;span class="x"&gt;\:\&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;\&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;\&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;\&amp;lt;(iframe|script|body|img|layer|div|meta|style|base|object|input)&lt;/span&gt;
&lt;span class="x"&gt;(onmouseover|onerror|onload)\=&lt;/span&gt;
&lt;span class="x"&gt;(gopher|doc|php|glob|file|phar|zlib|ftp|ldap|dict|ogg|data)\:\/&lt;/span&gt;
&lt;span class="x"&gt;java\.lang&lt;/span&gt;
&lt;span class="x"&gt;\&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;GET|post|cookie|files|session|env|phplib|GLOBALS|SERVER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;\[&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然有些WAF还是联网获取这些规则的，它们采用的一些正则表达式匹配的方法，比较容易被绕过的，也有人提出了&lt;a href="http://www.edu.cn/web_9955/20100609/t20100609_484473.shtml"&gt;主动防御&lt;/a&gt;的概念。&lt;/p&gt;
&lt;h5&gt;0x07  后记&lt;/h5&gt;
&lt;p&gt;当学习地渐渐深入的时候，会越来越发现其的神奇，不断的过滤，不断的绕过，以及还有二哥和长短短的一些猥琐的思路，并且也有很多人教导学习XSS时候，一定要注意JavaScript基础，毕竟好的一名跨站师，xsser都是JavaScript很厉害。&lt;/p&gt;
&lt;p&gt;当然防御XSS，不只有建立filter，也需要一些HttpOnly，Noscript，WAF，CSP的配合，更需要加强安全意识。&lt;/p&gt;
&lt;p&gt;以后探索的方向：&lt;/p&gt;
&lt;p&gt;自动化挖掘XSS漏洞，自动化防御，CVE里的XSS，以及总结一些好的XSS思路，新型XSS，自动化利用框架，浏览器Filter策略，防御XSS，机器学习等。。。&lt;/p&gt;
&lt;h5&gt;0x08  相关paper及资料&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;给开发者的终极XSS备忘录&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/phith0n/python-xss-filter"&gt;python-xss-filter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;site:freebuf.com xss&lt;/p&gt;
&lt;p&gt;&lt;a href="http://drops.wooyun.org/?s=xss&amp;amp;submit=%E6%90%9C%E7%B4%A2"&gt;Wooyun Drops&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://code.google.com/p/owasp-esapi-python/"&gt;owasp-esapi-python&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Tue, 24 May 2016 22:34:00 +0200</pubDate><guid>tag:,2016-05-23:dubuqingfeng.github.io/posts/2016/ 5/23/201605-xss-filter/index.html</guid><category>Web安全</category><category>xss</category></item></channel></rss>